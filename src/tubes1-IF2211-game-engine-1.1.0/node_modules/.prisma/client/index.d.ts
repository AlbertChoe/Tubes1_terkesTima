
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type BoardConfigPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "BoardConfig"
  objects: {
    season: SeasonPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    inventorySize: number
    canTackle: boolean
    teleporters: number
    teleportRelocation: number
    height: number
    width: number
    minimumDelayBetweenMoves: number
    sessionLength: number
    separateBoards: boolean
    dummyBots: number
    createTimeStamp: Date
    updateTimeStamp: Date
  }, ExtArgs["result"]["boardConfig"]>
  composites: {}
}

/**
 * Model BoardConfig
 * 
 */
export type BoardConfig = runtime.Types.DefaultSelection<BoardConfigPayload>
export type BotPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Bot"
  objects: {
    team: TeamPayload<ExtArgs> | null
    highscores: HighscorePayload<ExtArgs>[]
    recordings: RecordingPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    email: string
    createTimeStamp: Date
    updateTimeStamp: Date
    password: string | null
    teamId: string
  }, ExtArgs["result"]["bot"]>
  composites: {}
}

/**
 * Model Bot
 * 
 */
export type Bot = runtime.Types.DefaultSelection<BotPayload>
export type HighscorePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Highscore"
  objects: {
    bot: BotPayload<ExtArgs>
    season: SeasonPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    score: number
    createTimeStamp: Date
    updateTimeStamp: Date
    seasonId: string
    botId: string
  }, ExtArgs["result"]["highscore"]>
  composites: {}
}

/**
 * Model Highscore
 * 
 */
export type Highscore = runtime.Types.DefaultSelection<HighscorePayload>
export type RecordingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Recording"
  objects: {
    bot: BotPayload<ExtArgs>
    season: SeasonPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    score: number
    board: number
    createTimeStamp: Date
    recording: string
    seasonId: string
    botId: string
  }, ExtArgs["result"]["recording"]>
  composites: {}
}

/**
 * Model Recording
 * 
 */
export type Recording = runtime.Types.DefaultSelection<RecordingPayload>
export type SeasonPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Season"
  objects: {
    highscores: HighscorePayload<ExtArgs>[]
    recordings: RecordingPayload<ExtArgs>[]
    boardConfig: BoardConfigPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    startDate: Date
    endDate: Date
    createTimeStamp: Date
    updateTimeStamp: Date
    boardConfigId: string
  }, ExtArgs["result"]["season"]>
  composites: {}
}

/**
 * Model Season
 * 
 */
export type Season = runtime.Types.DefaultSelection<SeasonPayload>
export type TeamPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Team"
  objects: {
    bots: BotPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    abbreviation: string
    logotypeUrl: string
    createTimeStamp: Date
    updateTimeStamp: Date
  }, ExtArgs["result"]["team"]>
  composites: {}
}

/**
 * Model Team
 * 
 */
export type Team = runtime.Types.DefaultSelection<TeamPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BoardConfigs
 * const boardConfigs = await prisma.boardConfig.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BoardConfigs
   * const boardConfigs = await prisma.boardConfig.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.boardConfig`: Exposes CRUD operations for the **BoardConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardConfigs
    * const boardConfigs = await prisma.boardConfig.findMany()
    * ```
    */
  get boardConfig(): Prisma.BoardConfigDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.bot`: Exposes CRUD operations for the **Bot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bots
    * const bots = await prisma.bot.findMany()
    * ```
    */
  get bot(): Prisma.BotDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.highscore`: Exposes CRUD operations for the **Highscore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Highscores
    * const highscores = await prisma.highscore.findMany()
    * ```
    */
  get highscore(): Prisma.HighscoreDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.recording`: Exposes CRUD operations for the **Recording** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recordings
    * const recordings = await prisma.recording.findMany()
    * ```
    */
  get recording(): Prisma.RecordingDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.season`: Exposes CRUD operations for the **Season** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seasons
    * const seasons = await prisma.season.findMany()
    * ```
    */
  get season(): Prisma.SeasonDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    BoardConfig: 'BoardConfig',
    Bot: 'Bot',
    Highscore: 'Highscore',
    Recording: 'Recording',
    Season: 'Season',
    Team: 'Team'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'boardConfig' | 'bot' | 'highscore' | 'recording' | 'season' | 'team'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      BoardConfig: {
        payload: BoardConfigPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.BoardConfigFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardConfigFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload>
          }
          findFirst: {
            args: Prisma.BoardConfigFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardConfigFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload>
          }
          findMany: {
            args: Prisma.BoardConfigFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload>[]
          }
          create: {
            args: Prisma.BoardConfigCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload>
          }
          createMany: {
            args: Prisma.BoardConfigCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardConfigDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload>
          }
          update: {
            args: Prisma.BoardConfigUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload>
          }
          deleteMany: {
            args: Prisma.BoardConfigDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardConfigUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardConfigUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoardConfigPayload>
          }
          aggregate: {
            args: Prisma.BoardConfigAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoardConfig>
          }
          groupBy: {
            args: Prisma.BoardConfigGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardConfigCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardConfigCountAggregateOutputType> | number
          }
        }
      }
      Bot: {
        payload: BotPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.BotFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BotFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload>
          }
          findFirst: {
            args: Prisma.BotFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BotFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload>
          }
          findMany: {
            args: Prisma.BotFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload>[]
          }
          create: {
            args: Prisma.BotCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload>
          }
          createMany: {
            args: Prisma.BotCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BotDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload>
          }
          update: {
            args: Prisma.BotUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload>
          }
          deleteMany: {
            args: Prisma.BotDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BotUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BotUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BotPayload>
          }
          aggregate: {
            args: Prisma.BotAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBot>
          }
          groupBy: {
            args: Prisma.BotGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BotGroupByOutputType>[]
          }
          count: {
            args: Prisma.BotCountArgs<ExtArgs>,
            result: $Utils.Optional<BotCountAggregateOutputType> | number
          }
        }
      }
      Highscore: {
        payload: HighscorePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.HighscoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HighscoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload>
          }
          findFirst: {
            args: Prisma.HighscoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HighscoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload>
          }
          findMany: {
            args: Prisma.HighscoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload>[]
          }
          create: {
            args: Prisma.HighscoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload>
          }
          createMany: {
            args: Prisma.HighscoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HighscoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload>
          }
          update: {
            args: Prisma.HighscoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload>
          }
          deleteMany: {
            args: Prisma.HighscoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HighscoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HighscoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HighscorePayload>
          }
          aggregate: {
            args: Prisma.HighscoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHighscore>
          }
          groupBy: {
            args: Prisma.HighscoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HighscoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.HighscoreCountArgs<ExtArgs>,
            result: $Utils.Optional<HighscoreCountAggregateOutputType> | number
          }
        }
      }
      Recording: {
        payload: RecordingPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.RecordingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecordingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload>
          }
          findFirst: {
            args: Prisma.RecordingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecordingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload>
          }
          findMany: {
            args: Prisma.RecordingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload>[]
          }
          create: {
            args: Prisma.RecordingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload>
          }
          createMany: {
            args: Prisma.RecordingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecordingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload>
          }
          update: {
            args: Prisma.RecordingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload>
          }
          deleteMany: {
            args: Prisma.RecordingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecordingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecordingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecordingPayload>
          }
          aggregate: {
            args: Prisma.RecordingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecording>
          }
          groupBy: {
            args: Prisma.RecordingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecordingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecordingCountArgs<ExtArgs>,
            result: $Utils.Optional<RecordingCountAggregateOutputType> | number
          }
        }
      }
      Season: {
        payload: SeasonPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SeasonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeasonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload>
          }
          findFirst: {
            args: Prisma.SeasonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeasonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload>
          }
          findMany: {
            args: Prisma.SeasonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload>[]
          }
          create: {
            args: Prisma.SeasonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload>
          }
          createMany: {
            args: Prisma.SeasonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SeasonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload>
          }
          update: {
            args: Prisma.SeasonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload>
          }
          deleteMany: {
            args: Prisma.SeasonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SeasonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SeasonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SeasonPayload>
          }
          aggregate: {
            args: Prisma.SeasonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSeason>
          }
          groupBy: {
            args: Prisma.SeasonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SeasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeasonCountArgs<ExtArgs>,
            result: $Utils.Optional<SeasonCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: TeamPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>,
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BoardConfigCountOutputType
   */


  export type BoardConfigCountOutputType = {
    season: number
  }

  export type BoardConfigCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    season?: boolean | BoardConfigCountOutputTypeCountSeasonArgs
  }

  // Custom InputTypes

  /**
   * BoardConfigCountOutputType without action
   */
  export type BoardConfigCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfigCountOutputType
     */
    select?: BoardConfigCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BoardConfigCountOutputType without action
   */
  export type BoardConfigCountOutputTypeCountSeasonArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
  }



  /**
   * Count Type BotCountOutputType
   */


  export type BotCountOutputType = {
    highscores: number
    recordings: number
  }

  export type BotCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    highscores?: boolean | BotCountOutputTypeCountHighscoresArgs
    recordings?: boolean | BotCountOutputTypeCountRecordingsArgs
  }

  // Custom InputTypes

  /**
   * BotCountOutputType without action
   */
  export type BotCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotCountOutputType
     */
    select?: BotCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BotCountOutputType without action
   */
  export type BotCountOutputTypeCountHighscoresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: HighscoreWhereInput
  }


  /**
   * BotCountOutputType without action
   */
  export type BotCountOutputTypeCountRecordingsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecordingWhereInput
  }



  /**
   * Count Type SeasonCountOutputType
   */


  export type SeasonCountOutputType = {
    highscores: number
    recordings: number
  }

  export type SeasonCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    highscores?: boolean | SeasonCountOutputTypeCountHighscoresArgs
    recordings?: boolean | SeasonCountOutputTypeCountRecordingsArgs
  }

  // Custom InputTypes

  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonCountOutputType
     */
    select?: SeasonCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountHighscoresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: HighscoreWhereInput
  }


  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountRecordingsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecordingWhereInput
  }



  /**
   * Count Type TeamCountOutputType
   */


  export type TeamCountOutputType = {
    bots: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    bots?: boolean | TeamCountOutputTypeCountBotsArgs
  }

  // Custom InputTypes

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountBotsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BotWhereInput
  }



  /**
   * Models
   */

  /**
   * Model BoardConfig
   */


  export type AggregateBoardConfig = {
    _count: BoardConfigCountAggregateOutputType | null
    _avg: BoardConfigAvgAggregateOutputType | null
    _sum: BoardConfigSumAggregateOutputType | null
    _min: BoardConfigMinAggregateOutputType | null
    _max: BoardConfigMaxAggregateOutputType | null
  }

  export type BoardConfigAvgAggregateOutputType = {
    inventorySize: number | null
    teleporters: number | null
    teleportRelocation: number | null
    height: number | null
    width: number | null
    minimumDelayBetweenMoves: number | null
    sessionLength: number | null
    dummyBots: number | null
  }

  export type BoardConfigSumAggregateOutputType = {
    inventorySize: number | null
    teleporters: number | null
    teleportRelocation: number | null
    height: number | null
    width: number | null
    minimumDelayBetweenMoves: number | null
    sessionLength: number | null
    dummyBots: number | null
  }

  export type BoardConfigMinAggregateOutputType = {
    id: string | null
    inventorySize: number | null
    canTackle: boolean | null
    teleporters: number | null
    teleportRelocation: number | null
    height: number | null
    width: number | null
    minimumDelayBetweenMoves: number | null
    sessionLength: number | null
    separateBoards: boolean | null
    dummyBots: number | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
  }

  export type BoardConfigMaxAggregateOutputType = {
    id: string | null
    inventorySize: number | null
    canTackle: boolean | null
    teleporters: number | null
    teleportRelocation: number | null
    height: number | null
    width: number | null
    minimumDelayBetweenMoves: number | null
    sessionLength: number | null
    separateBoards: boolean | null
    dummyBots: number | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
  }

  export type BoardConfigCountAggregateOutputType = {
    id: number
    inventorySize: number
    canTackle: number
    teleporters: number
    teleportRelocation: number
    height: number
    width: number
    minimumDelayBetweenMoves: number
    sessionLength: number
    separateBoards: number
    dummyBots: number
    createTimeStamp: number
    updateTimeStamp: number
    _all: number
  }


  export type BoardConfigAvgAggregateInputType = {
    inventorySize?: true
    teleporters?: true
    teleportRelocation?: true
    height?: true
    width?: true
    minimumDelayBetweenMoves?: true
    sessionLength?: true
    dummyBots?: true
  }

  export type BoardConfigSumAggregateInputType = {
    inventorySize?: true
    teleporters?: true
    teleportRelocation?: true
    height?: true
    width?: true
    minimumDelayBetweenMoves?: true
    sessionLength?: true
    dummyBots?: true
  }

  export type BoardConfigMinAggregateInputType = {
    id?: true
    inventorySize?: true
    canTackle?: true
    teleporters?: true
    teleportRelocation?: true
    height?: true
    width?: true
    minimumDelayBetweenMoves?: true
    sessionLength?: true
    separateBoards?: true
    dummyBots?: true
    createTimeStamp?: true
    updateTimeStamp?: true
  }

  export type BoardConfigMaxAggregateInputType = {
    id?: true
    inventorySize?: true
    canTackle?: true
    teleporters?: true
    teleportRelocation?: true
    height?: true
    width?: true
    minimumDelayBetweenMoves?: true
    sessionLength?: true
    separateBoards?: true
    dummyBots?: true
    createTimeStamp?: true
    updateTimeStamp?: true
  }

  export type BoardConfigCountAggregateInputType = {
    id?: true
    inventorySize?: true
    canTackle?: true
    teleporters?: true
    teleportRelocation?: true
    height?: true
    width?: true
    minimumDelayBetweenMoves?: true
    sessionLength?: true
    separateBoards?: true
    dummyBots?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    _all?: true
  }

  export type BoardConfigAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardConfig to aggregate.
     */
    where?: BoardConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardConfigs to fetch.
     */
    orderBy?: Enumerable<BoardConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardConfigs
    **/
    _count?: true | BoardConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardConfigMaxAggregateInputType
  }

  export type GetBoardConfigAggregateType<T extends BoardConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardConfig[P]>
      : GetScalarType<T[P], AggregateBoardConfig[P]>
  }




  export type BoardConfigGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BoardConfigWhereInput
    orderBy?: Enumerable<BoardConfigOrderByWithAggregationInput>
    by: BoardConfigScalarFieldEnum[]
    having?: BoardConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardConfigCountAggregateInputType | true
    _avg?: BoardConfigAvgAggregateInputType
    _sum?: BoardConfigSumAggregateInputType
    _min?: BoardConfigMinAggregateInputType
    _max?: BoardConfigMaxAggregateInputType
  }


  export type BoardConfigGroupByOutputType = {
    id: string
    inventorySize: number
    canTackle: boolean
    teleporters: number
    teleportRelocation: number
    height: number
    width: number
    minimumDelayBetweenMoves: number
    sessionLength: number
    separateBoards: boolean
    dummyBots: number
    createTimeStamp: Date
    updateTimeStamp: Date
    _count: BoardConfigCountAggregateOutputType | null
    _avg: BoardConfigAvgAggregateOutputType | null
    _sum: BoardConfigSumAggregateOutputType | null
    _min: BoardConfigMinAggregateOutputType | null
    _max: BoardConfigMaxAggregateOutputType | null
  }

  type GetBoardConfigGroupByPayload<T extends BoardConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BoardConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardConfigGroupByOutputType[P]>
            : GetScalarType<T[P], BoardConfigGroupByOutputType[P]>
        }
      >
    >


  export type BoardConfigSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventorySize?: boolean
    canTackle?: boolean
    teleporters?: boolean
    teleportRelocation?: boolean
    height?: boolean
    width?: boolean
    minimumDelayBetweenMoves?: boolean
    sessionLength?: boolean
    separateBoards?: boolean
    dummyBots?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    season?: boolean | BoardConfig$seasonArgs<ExtArgs>
    _count?: boolean | BoardConfigCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["boardConfig"]>

  export type BoardConfigSelectScalar = {
    id?: boolean
    inventorySize?: boolean
    canTackle?: boolean
    teleporters?: boolean
    teleportRelocation?: boolean
    height?: boolean
    width?: boolean
    minimumDelayBetweenMoves?: boolean
    sessionLength?: boolean
    separateBoards?: boolean
    dummyBots?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
  }

  export type BoardConfigInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    season?: boolean | BoardConfig$seasonArgs<ExtArgs>
    _count?: boolean | BoardConfigCountOutputTypeArgs<ExtArgs>
  }


  type BoardConfigGetPayload<S extends boolean | null | undefined | BoardConfigArgs> = $Types.GetResult<BoardConfigPayload, S>

  type BoardConfigCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BoardConfigFindManyArgs, 'select' | 'include'> & {
      select?: BoardConfigCountAggregateInputType | true
    }

  export interface BoardConfigDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardConfig'], meta: { name: 'BoardConfig' } }
    /**
     * Find zero or one BoardConfig that matches the filter.
     * @param {BoardConfigFindUniqueArgs} args - Arguments to find a BoardConfig
     * @example
     * // Get one BoardConfig
     * const boardConfig = await prisma.boardConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardConfigFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BoardConfigFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BoardConfig'> extends True ? Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one BoardConfig that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardConfigFindUniqueOrThrowArgs} args - Arguments to find a BoardConfig
     * @example
     * // Get one BoardConfig
     * const boardConfig = await prisma.boardConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardConfigFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardConfigFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first BoardConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardConfigFindFirstArgs} args - Arguments to find a BoardConfig
     * @example
     * // Get one BoardConfig
     * const boardConfig = await prisma.boardConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardConfigFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BoardConfigFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BoardConfig'> extends True ? Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first BoardConfig that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardConfigFindFirstOrThrowArgs} args - Arguments to find a BoardConfig
     * @example
     * // Get one BoardConfig
     * const boardConfig = await prisma.boardConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardConfigFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardConfigFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more BoardConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardConfigFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardConfigs
     * const boardConfigs = await prisma.boardConfig.findMany()
     * 
     * // Get first 10 BoardConfigs
     * const boardConfigs = await prisma.boardConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardConfigWithIdOnly = await prisma.boardConfig.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BoardConfigFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardConfigFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a BoardConfig.
     * @param {BoardConfigCreateArgs} args - Arguments to create a BoardConfig.
     * @example
     * // Create one BoardConfig
     * const BoardConfig = await prisma.boardConfig.create({
     *   data: {
     *     // ... data to create a BoardConfig
     *   }
     * })
     * 
    **/
    create<T extends BoardConfigCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardConfigCreateArgs<ExtArgs>>
    ): Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many BoardConfigs.
     *     @param {BoardConfigCreateManyArgs} args - Arguments to create many BoardConfigs.
     *     @example
     *     // Create many BoardConfigs
     *     const boardConfig = await prisma.boardConfig.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardConfigCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardConfigCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BoardConfig.
     * @param {BoardConfigDeleteArgs} args - Arguments to delete one BoardConfig.
     * @example
     * // Delete one BoardConfig
     * const BoardConfig = await prisma.boardConfig.delete({
     *   where: {
     *     // ... filter to delete one BoardConfig
     *   }
     * })
     * 
    **/
    delete<T extends BoardConfigDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardConfigDeleteArgs<ExtArgs>>
    ): Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one BoardConfig.
     * @param {BoardConfigUpdateArgs} args - Arguments to update one BoardConfig.
     * @example
     * // Update one BoardConfig
     * const boardConfig = await prisma.boardConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardConfigUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardConfigUpdateArgs<ExtArgs>>
    ): Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more BoardConfigs.
     * @param {BoardConfigDeleteManyArgs} args - Arguments to filter BoardConfigs to delete.
     * @example
     * // Delete a few BoardConfigs
     * const { count } = await prisma.boardConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardConfigDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardConfigDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardConfigs
     * const boardConfig = await prisma.boardConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardConfigUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardConfigUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BoardConfig.
     * @param {BoardConfigUpsertArgs} args - Arguments to update or create a BoardConfig.
     * @example
     * // Update or create a BoardConfig
     * const boardConfig = await prisma.boardConfig.upsert({
     *   create: {
     *     // ... data to create a BoardConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardConfig we want to update
     *   }
     * })
    **/
    upsert<T extends BoardConfigUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardConfigUpsertArgs<ExtArgs>>
    ): Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of BoardConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardConfigCountArgs} args - Arguments to filter BoardConfigs to count.
     * @example
     * // Count the number of BoardConfigs
     * const count = await prisma.boardConfig.count({
     *   where: {
     *     // ... the filter for the BoardConfigs we want to count
     *   }
     * })
    **/
    count<T extends BoardConfigCountArgs>(
      args?: Subset<T, BoardConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardConfigAggregateArgs>(args: Subset<T, BoardConfigAggregateArgs>): Prisma.PrismaPromise<GetBoardConfigAggregateType<T>>

    /**
     * Group by BoardConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardConfigGroupByArgs['orderBy'] }
        : { orderBy?: BoardConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BoardConfigClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    season<T extends BoardConfig$seasonArgs<ExtArgs> = {}>(args?: Subset<T, BoardConfig$seasonArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BoardConfig base type for findUnique actions
   */
  export type BoardConfigFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * Filter, which BoardConfig to fetch.
     */
    where: BoardConfigWhereUniqueInput
  }

  /**
   * BoardConfig findUnique
   */
  export interface BoardConfigFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BoardConfigFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BoardConfig findUniqueOrThrow
   */
  export type BoardConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * Filter, which BoardConfig to fetch.
     */
    where: BoardConfigWhereUniqueInput
  }


  /**
   * BoardConfig base type for findFirst actions
   */
  export type BoardConfigFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * Filter, which BoardConfig to fetch.
     */
    where?: BoardConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardConfigs to fetch.
     */
    orderBy?: Enumerable<BoardConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardConfigs.
     */
    cursor?: BoardConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardConfigs.
     */
    distinct?: Enumerable<BoardConfigScalarFieldEnum>
  }

  /**
   * BoardConfig findFirst
   */
  export interface BoardConfigFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BoardConfigFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BoardConfig findFirstOrThrow
   */
  export type BoardConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * Filter, which BoardConfig to fetch.
     */
    where?: BoardConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardConfigs to fetch.
     */
    orderBy?: Enumerable<BoardConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardConfigs.
     */
    cursor?: BoardConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardConfigs.
     */
    distinct?: Enumerable<BoardConfigScalarFieldEnum>
  }


  /**
   * BoardConfig findMany
   */
  export type BoardConfigFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * Filter, which BoardConfigs to fetch.
     */
    where?: BoardConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardConfigs to fetch.
     */
    orderBy?: Enumerable<BoardConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardConfigs.
     */
    cursor?: BoardConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardConfigs.
     */
    skip?: number
    distinct?: Enumerable<BoardConfigScalarFieldEnum>
  }


  /**
   * BoardConfig create
   */
  export type BoardConfigCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a BoardConfig.
     */
    data?: XOR<BoardConfigCreateInput, BoardConfigUncheckedCreateInput>
  }


  /**
   * BoardConfig createMany
   */
  export type BoardConfigCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardConfigs.
     */
    data: Enumerable<BoardConfigCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BoardConfig update
   */
  export type BoardConfigUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a BoardConfig.
     */
    data: XOR<BoardConfigUpdateInput, BoardConfigUncheckedUpdateInput>
    /**
     * Choose, which BoardConfig to update.
     */
    where: BoardConfigWhereUniqueInput
  }


  /**
   * BoardConfig updateMany
   */
  export type BoardConfigUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardConfigs.
     */
    data: XOR<BoardConfigUpdateManyMutationInput, BoardConfigUncheckedUpdateManyInput>
    /**
     * Filter which BoardConfigs to update
     */
    where?: BoardConfigWhereInput
  }


  /**
   * BoardConfig upsert
   */
  export type BoardConfigUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the BoardConfig to update in case it exists.
     */
    where: BoardConfigWhereUniqueInput
    /**
     * In case the BoardConfig found by the `where` argument doesn't exist, create a new BoardConfig with this data.
     */
    create: XOR<BoardConfigCreateInput, BoardConfigUncheckedCreateInput>
    /**
     * In case the BoardConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardConfigUpdateInput, BoardConfigUncheckedUpdateInput>
  }


  /**
   * BoardConfig delete
   */
  export type BoardConfigDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
    /**
     * Filter which BoardConfig to delete.
     */
    where: BoardConfigWhereUniqueInput
  }


  /**
   * BoardConfig deleteMany
   */
  export type BoardConfigDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardConfigs to delete
     */
    where?: BoardConfigWhereInput
  }


  /**
   * BoardConfig.season
   */
  export type BoardConfig$seasonArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    where?: SeasonWhereInput
    orderBy?: Enumerable<SeasonOrderByWithRelationInput>
    cursor?: SeasonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SeasonScalarFieldEnum>
  }


  /**
   * BoardConfig without action
   */
  export type BoardConfigArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardConfig
     */
    select?: BoardConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardConfigInclude<ExtArgs> | null
  }



  /**
   * Model Bot
   */


  export type AggregateBot = {
    _count: BotCountAggregateOutputType | null
    _min: BotMinAggregateOutputType | null
    _max: BotMaxAggregateOutputType | null
  }

  export type BotMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
    password: string | null
    teamId: string | null
  }

  export type BotMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
    password: string | null
    teamId: string | null
  }

  export type BotCountAggregateOutputType = {
    id: number
    name: number
    email: number
    createTimeStamp: number
    updateTimeStamp: number
    password: number
    teamId: number
    _all: number
  }


  export type BotMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    password?: true
    teamId?: true
  }

  export type BotMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    password?: true
    teamId?: true
  }

  export type BotCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    password?: true
    teamId?: true
    _all?: true
  }

  export type BotAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bot to aggregate.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: Enumerable<BotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bots
    **/
    _count?: true | BotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BotMaxAggregateInputType
  }

  export type GetBotAggregateType<T extends BotAggregateArgs> = {
        [P in keyof T & keyof AggregateBot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBot[P]>
      : GetScalarType<T[P], AggregateBot[P]>
  }




  export type BotGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BotWhereInput
    orderBy?: Enumerable<BotOrderByWithAggregationInput>
    by: BotScalarFieldEnum[]
    having?: BotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BotCountAggregateInputType | true
    _min?: BotMinAggregateInputType
    _max?: BotMaxAggregateInputType
  }


  export type BotGroupByOutputType = {
    id: string
    name: string
    email: string
    createTimeStamp: Date
    updateTimeStamp: Date
    password: string | null
    teamId: string
    _count: BotCountAggregateOutputType | null
    _min: BotMinAggregateOutputType | null
    _max: BotMaxAggregateOutputType | null
  }

  type GetBotGroupByPayload<T extends BotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BotGroupByOutputType[P]>
            : GetScalarType<T[P], BotGroupByOutputType[P]>
        }
      >
    >


  export type BotSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    password?: boolean
    teamId?: boolean
    team?: boolean | TeamArgs<ExtArgs>
    highscores?: boolean | Bot$highscoresArgs<ExtArgs>
    recordings?: boolean | Bot$recordingsArgs<ExtArgs>
    _count?: boolean | BotCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["bot"]>

  export type BotSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    password?: boolean
    teamId?: boolean
  }

  export type BotInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    team?: boolean | TeamArgs<ExtArgs>
    highscores?: boolean | Bot$highscoresArgs<ExtArgs>
    recordings?: boolean | Bot$recordingsArgs<ExtArgs>
    _count?: boolean | BotCountOutputTypeArgs<ExtArgs>
  }


  type BotGetPayload<S extends boolean | null | undefined | BotArgs> = $Types.GetResult<BotPayload, S>

  type BotCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BotFindManyArgs, 'select' | 'include'> & {
      select?: BotCountAggregateInputType | true
    }

  export interface BotDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bot'], meta: { name: 'Bot' } }
    /**
     * Find zero or one Bot that matches the filter.
     * @param {BotFindUniqueArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BotFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BotFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Bot'> extends True ? Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Bot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BotFindUniqueOrThrowArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BotFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BotFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Bot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotFindFirstArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BotFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BotFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Bot'> extends True ? Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Bot that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotFindFirstOrThrowArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BotFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BotFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Bots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bots
     * const bots = await prisma.bot.findMany()
     * 
     * // Get first 10 Bots
     * const bots = await prisma.bot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const botWithIdOnly = await prisma.bot.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BotFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BotFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<BotPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Bot.
     * @param {BotCreateArgs} args - Arguments to create a Bot.
     * @example
     * // Create one Bot
     * const Bot = await prisma.bot.create({
     *   data: {
     *     // ... data to create a Bot
     *   }
     * })
     * 
    **/
    create<T extends BotCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BotCreateArgs<ExtArgs>>
    ): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Bots.
     *     @param {BotCreateManyArgs} args - Arguments to create many Bots.
     *     @example
     *     // Create many Bots
     *     const bot = await prisma.bot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BotCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BotCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bot.
     * @param {BotDeleteArgs} args - Arguments to delete one Bot.
     * @example
     * // Delete one Bot
     * const Bot = await prisma.bot.delete({
     *   where: {
     *     // ... filter to delete one Bot
     *   }
     * })
     * 
    **/
    delete<T extends BotDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BotDeleteArgs<ExtArgs>>
    ): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Bot.
     * @param {BotUpdateArgs} args - Arguments to update one Bot.
     * @example
     * // Update one Bot
     * const bot = await prisma.bot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BotUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BotUpdateArgs<ExtArgs>>
    ): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Bots.
     * @param {BotDeleteManyArgs} args - Arguments to filter Bots to delete.
     * @example
     * // Delete a few Bots
     * const { count } = await prisma.bot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BotDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BotDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bots
     * const bot = await prisma.bot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BotUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BotUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bot.
     * @param {BotUpsertArgs} args - Arguments to update or create a Bot.
     * @example
     * // Update or create a Bot
     * const bot = await prisma.bot.upsert({
     *   create: {
     *     // ... data to create a Bot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bot we want to update
     *   }
     * })
    **/
    upsert<T extends BotUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BotUpsertArgs<ExtArgs>>
    ): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Bots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotCountArgs} args - Arguments to filter Bots to count.
     * @example
     * // Count the number of Bots
     * const count = await prisma.bot.count({
     *   where: {
     *     // ... the filter for the Bots we want to count
     *   }
     * })
    **/
    count<T extends BotCountArgs>(
      args?: Subset<T, BotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BotAggregateArgs>(args: Subset<T, BotAggregateArgs>): Prisma.PrismaPromise<GetBotAggregateType<T>>

    /**
     * Group by Bot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BotGroupByArgs['orderBy'] }
        : { orderBy?: BotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Bot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BotClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    team<T extends TeamArgs<ExtArgs> = {}>(args?: Subset<T, TeamArgs<ExtArgs>>): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    highscores<T extends Bot$highscoresArgs<ExtArgs> = {}>(args?: Subset<T, Bot$highscoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findMany', never>| Null>;

    recordings<T extends Bot$recordingsArgs<ExtArgs> = {}>(args?: Subset<T, Bot$recordingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Bot base type for findUnique actions
   */
  export type BotFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where: BotWhereUniqueInput
  }

  /**
   * Bot findUnique
   */
  export interface BotFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BotFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Bot findUniqueOrThrow
   */
  export type BotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where: BotWhereUniqueInput
  }


  /**
   * Bot base type for findFirst actions
   */
  export type BotFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: Enumerable<BotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bots.
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bots.
     */
    distinct?: Enumerable<BotScalarFieldEnum>
  }

  /**
   * Bot findFirst
   */
  export interface BotFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BotFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Bot findFirstOrThrow
   */
  export type BotFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: Enumerable<BotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bots.
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bots.
     */
    distinct?: Enumerable<BotScalarFieldEnum>
  }


  /**
   * Bot findMany
   */
  export type BotFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bots to fetch.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: Enumerable<BotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bots.
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    distinct?: Enumerable<BotScalarFieldEnum>
  }


  /**
   * Bot create
   */
  export type BotCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * The data needed to create a Bot.
     */
    data: XOR<BotCreateInput, BotUncheckedCreateInput>
  }


  /**
   * Bot createMany
   */
  export type BotCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bots.
     */
    data: Enumerable<BotCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Bot update
   */
  export type BotUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * The data needed to update a Bot.
     */
    data: XOR<BotUpdateInput, BotUncheckedUpdateInput>
    /**
     * Choose, which Bot to update.
     */
    where: BotWhereUniqueInput
  }


  /**
   * Bot updateMany
   */
  export type BotUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bots.
     */
    data: XOR<BotUpdateManyMutationInput, BotUncheckedUpdateManyInput>
    /**
     * Filter which Bots to update
     */
    where?: BotWhereInput
  }


  /**
   * Bot upsert
   */
  export type BotUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * The filter to search for the Bot to update in case it exists.
     */
    where: BotWhereUniqueInput
    /**
     * In case the Bot found by the `where` argument doesn't exist, create a new Bot with this data.
     */
    create: XOR<BotCreateInput, BotUncheckedCreateInput>
    /**
     * In case the Bot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BotUpdateInput, BotUncheckedUpdateInput>
  }


  /**
   * Bot delete
   */
  export type BotDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter which Bot to delete.
     */
    where: BotWhereUniqueInput
  }


  /**
   * Bot deleteMany
   */
  export type BotDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bots to delete
     */
    where?: BotWhereInput
  }


  /**
   * Bot.highscores
   */
  export type Bot$highscoresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    where?: HighscoreWhereInput
    orderBy?: Enumerable<HighscoreOrderByWithRelationInput>
    cursor?: HighscoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HighscoreScalarFieldEnum>
  }


  /**
   * Bot.recordings
   */
  export type Bot$recordingsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    where?: RecordingWhereInput
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    cursor?: RecordingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Bot without action
   */
  export type BotArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
  }



  /**
   * Model Highscore
   */


  export type AggregateHighscore = {
    _count: HighscoreCountAggregateOutputType | null
    _avg: HighscoreAvgAggregateOutputType | null
    _sum: HighscoreSumAggregateOutputType | null
    _min: HighscoreMinAggregateOutputType | null
    _max: HighscoreMaxAggregateOutputType | null
  }

  export type HighscoreAvgAggregateOutputType = {
    score: number | null
  }

  export type HighscoreSumAggregateOutputType = {
    score: number | null
  }

  export type HighscoreMinAggregateOutputType = {
    id: string | null
    score: number | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
    seasonId: string | null
    botId: string | null
  }

  export type HighscoreMaxAggregateOutputType = {
    id: string | null
    score: number | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
    seasonId: string | null
    botId: string | null
  }

  export type HighscoreCountAggregateOutputType = {
    id: number
    score: number
    createTimeStamp: number
    updateTimeStamp: number
    seasonId: number
    botId: number
    _all: number
  }


  export type HighscoreAvgAggregateInputType = {
    score?: true
  }

  export type HighscoreSumAggregateInputType = {
    score?: true
  }

  export type HighscoreMinAggregateInputType = {
    id?: true
    score?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    seasonId?: true
    botId?: true
  }

  export type HighscoreMaxAggregateInputType = {
    id?: true
    score?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    seasonId?: true
    botId?: true
  }

  export type HighscoreCountAggregateInputType = {
    id?: true
    score?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    seasonId?: true
    botId?: true
    _all?: true
  }

  export type HighscoreAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Highscore to aggregate.
     */
    where?: HighscoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highscores to fetch.
     */
    orderBy?: Enumerable<HighscoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HighscoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highscores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highscores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Highscores
    **/
    _count?: true | HighscoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HighscoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HighscoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HighscoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HighscoreMaxAggregateInputType
  }

  export type GetHighscoreAggregateType<T extends HighscoreAggregateArgs> = {
        [P in keyof T & keyof AggregateHighscore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHighscore[P]>
      : GetScalarType<T[P], AggregateHighscore[P]>
  }




  export type HighscoreGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: HighscoreWhereInput
    orderBy?: Enumerable<HighscoreOrderByWithAggregationInput>
    by: HighscoreScalarFieldEnum[]
    having?: HighscoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HighscoreCountAggregateInputType | true
    _avg?: HighscoreAvgAggregateInputType
    _sum?: HighscoreSumAggregateInputType
    _min?: HighscoreMinAggregateInputType
    _max?: HighscoreMaxAggregateInputType
  }


  export type HighscoreGroupByOutputType = {
    id: string
    score: number
    createTimeStamp: Date
    updateTimeStamp: Date
    seasonId: string
    botId: string
    _count: HighscoreCountAggregateOutputType | null
    _avg: HighscoreAvgAggregateOutputType | null
    _sum: HighscoreSumAggregateOutputType | null
    _min: HighscoreMinAggregateOutputType | null
    _max: HighscoreMaxAggregateOutputType | null
  }

  type GetHighscoreGroupByPayload<T extends HighscoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HighscoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HighscoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HighscoreGroupByOutputType[P]>
            : GetScalarType<T[P], HighscoreGroupByOutputType[P]>
        }
      >
    >


  export type HighscoreSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    seasonId?: boolean
    botId?: boolean
    bot?: boolean | BotArgs<ExtArgs>
    season?: boolean | SeasonArgs<ExtArgs>
  }, ExtArgs["result"]["highscore"]>

  export type HighscoreSelectScalar = {
    id?: boolean
    score?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    seasonId?: boolean
    botId?: boolean
  }

  export type HighscoreInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    bot?: boolean | BotArgs<ExtArgs>
    season?: boolean | SeasonArgs<ExtArgs>
  }


  type HighscoreGetPayload<S extends boolean | null | undefined | HighscoreArgs> = $Types.GetResult<HighscorePayload, S>

  type HighscoreCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<HighscoreFindManyArgs, 'select' | 'include'> & {
      select?: HighscoreCountAggregateInputType | true
    }

  export interface HighscoreDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Highscore'], meta: { name: 'Highscore' } }
    /**
     * Find zero or one Highscore that matches the filter.
     * @param {HighscoreFindUniqueArgs} args - Arguments to find a Highscore
     * @example
     * // Get one Highscore
     * const highscore = await prisma.highscore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HighscoreFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HighscoreFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Highscore'> extends True ? Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Highscore that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HighscoreFindUniqueOrThrowArgs} args - Arguments to find a Highscore
     * @example
     * // Get one Highscore
     * const highscore = await prisma.highscore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HighscoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HighscoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Highscore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighscoreFindFirstArgs} args - Arguments to find a Highscore
     * @example
     * // Get one Highscore
     * const highscore = await prisma.highscore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HighscoreFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HighscoreFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Highscore'> extends True ? Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Highscore that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighscoreFindFirstOrThrowArgs} args - Arguments to find a Highscore
     * @example
     * // Get one Highscore
     * const highscore = await prisma.highscore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HighscoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HighscoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Highscores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighscoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Highscores
     * const highscores = await prisma.highscore.findMany()
     * 
     * // Get first 10 Highscores
     * const highscores = await prisma.highscore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const highscoreWithIdOnly = await prisma.highscore.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HighscoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HighscoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Highscore.
     * @param {HighscoreCreateArgs} args - Arguments to create a Highscore.
     * @example
     * // Create one Highscore
     * const Highscore = await prisma.highscore.create({
     *   data: {
     *     // ... data to create a Highscore
     *   }
     * })
     * 
    **/
    create<T extends HighscoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HighscoreCreateArgs<ExtArgs>>
    ): Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Highscores.
     *     @param {HighscoreCreateManyArgs} args - Arguments to create many Highscores.
     *     @example
     *     // Create many Highscores
     *     const highscore = await prisma.highscore.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HighscoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HighscoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Highscore.
     * @param {HighscoreDeleteArgs} args - Arguments to delete one Highscore.
     * @example
     * // Delete one Highscore
     * const Highscore = await prisma.highscore.delete({
     *   where: {
     *     // ... filter to delete one Highscore
     *   }
     * })
     * 
    **/
    delete<T extends HighscoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HighscoreDeleteArgs<ExtArgs>>
    ): Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Highscore.
     * @param {HighscoreUpdateArgs} args - Arguments to update one Highscore.
     * @example
     * // Update one Highscore
     * const highscore = await prisma.highscore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HighscoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HighscoreUpdateArgs<ExtArgs>>
    ): Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Highscores.
     * @param {HighscoreDeleteManyArgs} args - Arguments to filter Highscores to delete.
     * @example
     * // Delete a few Highscores
     * const { count } = await prisma.highscore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HighscoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HighscoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Highscores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighscoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Highscores
     * const highscore = await prisma.highscore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HighscoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HighscoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Highscore.
     * @param {HighscoreUpsertArgs} args - Arguments to update or create a Highscore.
     * @example
     * // Update or create a Highscore
     * const highscore = await prisma.highscore.upsert({
     *   create: {
     *     // ... data to create a Highscore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Highscore we want to update
     *   }
     * })
    **/
    upsert<T extends HighscoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HighscoreUpsertArgs<ExtArgs>>
    ): Prisma__HighscoreClient<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Highscores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighscoreCountArgs} args - Arguments to filter Highscores to count.
     * @example
     * // Count the number of Highscores
     * const count = await prisma.highscore.count({
     *   where: {
     *     // ... the filter for the Highscores we want to count
     *   }
     * })
    **/
    count<T extends HighscoreCountArgs>(
      args?: Subset<T, HighscoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HighscoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Highscore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighscoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HighscoreAggregateArgs>(args: Subset<T, HighscoreAggregateArgs>): Prisma.PrismaPromise<GetHighscoreAggregateType<T>>

    /**
     * Group by Highscore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighscoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HighscoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HighscoreGroupByArgs['orderBy'] }
        : { orderBy?: HighscoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HighscoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHighscoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Highscore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HighscoreClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    bot<T extends BotArgs<ExtArgs> = {}>(args?: Subset<T, BotArgs<ExtArgs>>): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    season<T extends SeasonArgs<ExtArgs> = {}>(args?: Subset<T, SeasonArgs<ExtArgs>>): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Highscore base type for findUnique actions
   */
  export type HighscoreFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * Filter, which Highscore to fetch.
     */
    where: HighscoreWhereUniqueInput
  }

  /**
   * Highscore findUnique
   */
  export interface HighscoreFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends HighscoreFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Highscore findUniqueOrThrow
   */
  export type HighscoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * Filter, which Highscore to fetch.
     */
    where: HighscoreWhereUniqueInput
  }


  /**
   * Highscore base type for findFirst actions
   */
  export type HighscoreFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * Filter, which Highscore to fetch.
     */
    where?: HighscoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highscores to fetch.
     */
    orderBy?: Enumerable<HighscoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Highscores.
     */
    cursor?: HighscoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highscores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highscores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Highscores.
     */
    distinct?: Enumerable<HighscoreScalarFieldEnum>
  }

  /**
   * Highscore findFirst
   */
  export interface HighscoreFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends HighscoreFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Highscore findFirstOrThrow
   */
  export type HighscoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * Filter, which Highscore to fetch.
     */
    where?: HighscoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highscores to fetch.
     */
    orderBy?: Enumerable<HighscoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Highscores.
     */
    cursor?: HighscoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highscores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highscores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Highscores.
     */
    distinct?: Enumerable<HighscoreScalarFieldEnum>
  }


  /**
   * Highscore findMany
   */
  export type HighscoreFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * Filter, which Highscores to fetch.
     */
    where?: HighscoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highscores to fetch.
     */
    orderBy?: Enumerable<HighscoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Highscores.
     */
    cursor?: HighscoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highscores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highscores.
     */
    skip?: number
    distinct?: Enumerable<HighscoreScalarFieldEnum>
  }


  /**
   * Highscore create
   */
  export type HighscoreCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Highscore.
     */
    data: XOR<HighscoreCreateInput, HighscoreUncheckedCreateInput>
  }


  /**
   * Highscore createMany
   */
  export type HighscoreCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Highscores.
     */
    data: Enumerable<HighscoreCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Highscore update
   */
  export type HighscoreUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Highscore.
     */
    data: XOR<HighscoreUpdateInput, HighscoreUncheckedUpdateInput>
    /**
     * Choose, which Highscore to update.
     */
    where: HighscoreWhereUniqueInput
  }


  /**
   * Highscore updateMany
   */
  export type HighscoreUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Highscores.
     */
    data: XOR<HighscoreUpdateManyMutationInput, HighscoreUncheckedUpdateManyInput>
    /**
     * Filter which Highscores to update
     */
    where?: HighscoreWhereInput
  }


  /**
   * Highscore upsert
   */
  export type HighscoreUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Highscore to update in case it exists.
     */
    where: HighscoreWhereUniqueInput
    /**
     * In case the Highscore found by the `where` argument doesn't exist, create a new Highscore with this data.
     */
    create: XOR<HighscoreCreateInput, HighscoreUncheckedCreateInput>
    /**
     * In case the Highscore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HighscoreUpdateInput, HighscoreUncheckedUpdateInput>
  }


  /**
   * Highscore delete
   */
  export type HighscoreDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    /**
     * Filter which Highscore to delete.
     */
    where: HighscoreWhereUniqueInput
  }


  /**
   * Highscore deleteMany
   */
  export type HighscoreDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Highscores to delete
     */
    where?: HighscoreWhereInput
  }


  /**
   * Highscore without action
   */
  export type HighscoreArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
  }



  /**
   * Model Recording
   */


  export type AggregateRecording = {
    _count: RecordingCountAggregateOutputType | null
    _avg: RecordingAvgAggregateOutputType | null
    _sum: RecordingSumAggregateOutputType | null
    _min: RecordingMinAggregateOutputType | null
    _max: RecordingMaxAggregateOutputType | null
  }

  export type RecordingAvgAggregateOutputType = {
    score: number | null
    board: number | null
  }

  export type RecordingSumAggregateOutputType = {
    score: number | null
    board: number | null
  }

  export type RecordingMinAggregateOutputType = {
    id: string | null
    score: number | null
    board: number | null
    createTimeStamp: Date | null
    recording: string | null
    seasonId: string | null
    botId: string | null
  }

  export type RecordingMaxAggregateOutputType = {
    id: string | null
    score: number | null
    board: number | null
    createTimeStamp: Date | null
    recording: string | null
    seasonId: string | null
    botId: string | null
  }

  export type RecordingCountAggregateOutputType = {
    id: number
    score: number
    board: number
    createTimeStamp: number
    recording: number
    seasonId: number
    botId: number
    _all: number
  }


  export type RecordingAvgAggregateInputType = {
    score?: true
    board?: true
  }

  export type RecordingSumAggregateInputType = {
    score?: true
    board?: true
  }

  export type RecordingMinAggregateInputType = {
    id?: true
    score?: true
    board?: true
    createTimeStamp?: true
    recording?: true
    seasonId?: true
    botId?: true
  }

  export type RecordingMaxAggregateInputType = {
    id?: true
    score?: true
    board?: true
    createTimeStamp?: true
    recording?: true
    seasonId?: true
    botId?: true
  }

  export type RecordingCountAggregateInputType = {
    id?: true
    score?: true
    board?: true
    createTimeStamp?: true
    recording?: true
    seasonId?: true
    botId?: true
    _all?: true
  }

  export type RecordingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recording to aggregate.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recordings
    **/
    _count?: true | RecordingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecordingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecordingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordingMaxAggregateInputType
  }

  export type GetRecordingAggregateType<T extends RecordingAggregateArgs> = {
        [P in keyof T & keyof AggregateRecording]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecording[P]>
      : GetScalarType<T[P], AggregateRecording[P]>
  }




  export type RecordingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecordingWhereInput
    orderBy?: Enumerable<RecordingOrderByWithAggregationInput>
    by: RecordingScalarFieldEnum[]
    having?: RecordingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordingCountAggregateInputType | true
    _avg?: RecordingAvgAggregateInputType
    _sum?: RecordingSumAggregateInputType
    _min?: RecordingMinAggregateInputType
    _max?: RecordingMaxAggregateInputType
  }


  export type RecordingGroupByOutputType = {
    id: string
    score: number
    board: number
    createTimeStamp: Date
    recording: string
    seasonId: string
    botId: string
    _count: RecordingCountAggregateOutputType | null
    _avg: RecordingAvgAggregateOutputType | null
    _sum: RecordingSumAggregateOutputType | null
    _min: RecordingMinAggregateOutputType | null
    _max: RecordingMaxAggregateOutputType | null
  }

  type GetRecordingGroupByPayload<T extends RecordingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RecordingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordingGroupByOutputType[P]>
            : GetScalarType<T[P], RecordingGroupByOutputType[P]>
        }
      >
    >


  export type RecordingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    board?: boolean
    createTimeStamp?: boolean
    recording?: boolean
    seasonId?: boolean
    botId?: boolean
    bot?: boolean | BotArgs<ExtArgs>
    season?: boolean | SeasonArgs<ExtArgs>
  }, ExtArgs["result"]["recording"]>

  export type RecordingSelectScalar = {
    id?: boolean
    score?: boolean
    board?: boolean
    createTimeStamp?: boolean
    recording?: boolean
    seasonId?: boolean
    botId?: boolean
  }

  export type RecordingInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    bot?: boolean | BotArgs<ExtArgs>
    season?: boolean | SeasonArgs<ExtArgs>
  }


  type RecordingGetPayload<S extends boolean | null | undefined | RecordingArgs> = $Types.GetResult<RecordingPayload, S>

  type RecordingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RecordingFindManyArgs, 'select' | 'include'> & {
      select?: RecordingCountAggregateInputType | true
    }

  export interface RecordingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recording'], meta: { name: 'Recording' } }
    /**
     * Find zero or one Recording that matches the filter.
     * @param {RecordingFindUniqueArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecordingFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RecordingFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recording'> extends True ? Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Recording that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecordingFindUniqueOrThrowArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecordingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Recording that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindFirstArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecordingFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RecordingFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recording'> extends True ? Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Recording that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindFirstOrThrowArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecordingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Recordings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recordings
     * const recordings = await prisma.recording.findMany()
     * 
     * // Get first 10 Recordings
     * const recordings = await prisma.recording.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordingWithIdOnly = await prisma.recording.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecordingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Recording.
     * @param {RecordingCreateArgs} args - Arguments to create a Recording.
     * @example
     * // Create one Recording
     * const Recording = await prisma.recording.create({
     *   data: {
     *     // ... data to create a Recording
     *   }
     * })
     * 
    **/
    create<T extends RecordingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecordingCreateArgs<ExtArgs>>
    ): Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Recordings.
     *     @param {RecordingCreateManyArgs} args - Arguments to create many Recordings.
     *     @example
     *     // Create many Recordings
     *     const recording = await prisma.recording.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecordingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recording.
     * @param {RecordingDeleteArgs} args - Arguments to delete one Recording.
     * @example
     * // Delete one Recording
     * const Recording = await prisma.recording.delete({
     *   where: {
     *     // ... filter to delete one Recording
     *   }
     * })
     * 
    **/
    delete<T extends RecordingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecordingDeleteArgs<ExtArgs>>
    ): Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Recording.
     * @param {RecordingUpdateArgs} args - Arguments to update one Recording.
     * @example
     * // Update one Recording
     * const recording = await prisma.recording.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecordingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecordingUpdateArgs<ExtArgs>>
    ): Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Recordings.
     * @param {RecordingDeleteManyArgs} args - Arguments to filter Recordings to delete.
     * @example
     * // Delete a few Recordings
     * const { count } = await prisma.recording.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecordingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recordings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recordings
     * const recording = await prisma.recording.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecordingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecordingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recording.
     * @param {RecordingUpsertArgs} args - Arguments to update or create a Recording.
     * @example
     * // Update or create a Recording
     * const recording = await prisma.recording.upsert({
     *   create: {
     *     // ... data to create a Recording
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recording we want to update
     *   }
     * })
    **/
    upsert<T extends RecordingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecordingUpsertArgs<ExtArgs>>
    ): Prisma__RecordingClient<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Recordings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingCountArgs} args - Arguments to filter Recordings to count.
     * @example
     * // Count the number of Recordings
     * const count = await prisma.recording.count({
     *   where: {
     *     // ... the filter for the Recordings we want to count
     *   }
     * })
    **/
    count<T extends RecordingCountArgs>(
      args?: Subset<T, RecordingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recording.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordingAggregateArgs>(args: Subset<T, RecordingAggregateArgs>): Prisma.PrismaPromise<GetRecordingAggregateType<T>>

    /**
     * Group by Recording.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordingGroupByArgs['orderBy'] }
        : { orderBy?: RecordingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Recording.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecordingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    bot<T extends BotArgs<ExtArgs> = {}>(args?: Subset<T, BotArgs<ExtArgs>>): Prisma__BotClient<$Types.GetResult<BotPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    season<T extends SeasonArgs<ExtArgs> = {}>(args?: Subset<T, SeasonArgs<ExtArgs>>): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Recording base type for findUnique actions
   */
  export type RecordingFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where: RecordingWhereUniqueInput
  }

  /**
   * Recording findUnique
   */
  export interface RecordingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RecordingFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recording findUniqueOrThrow
   */
  export type RecordingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where: RecordingWhereUniqueInput
  }


  /**
   * Recording base type for findFirst actions
   */
  export type RecordingFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recordings.
     */
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }

  /**
   * Recording findFirst
   */
  export interface RecordingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RecordingFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recording findFirstOrThrow
   */
  export type RecordingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recordings.
     */
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Recording findMany
   */
  export type RecordingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recordings to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Recording create
   */
  export type RecordingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * The data needed to create a Recording.
     */
    data: XOR<RecordingCreateInput, RecordingUncheckedCreateInput>
  }


  /**
   * Recording createMany
   */
  export type RecordingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recordings.
     */
    data: Enumerable<RecordingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Recording update
   */
  export type RecordingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * The data needed to update a Recording.
     */
    data: XOR<RecordingUpdateInput, RecordingUncheckedUpdateInput>
    /**
     * Choose, which Recording to update.
     */
    where: RecordingWhereUniqueInput
  }


  /**
   * Recording updateMany
   */
  export type RecordingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recordings.
     */
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyInput>
    /**
     * Filter which Recordings to update
     */
    where?: RecordingWhereInput
  }


  /**
   * Recording upsert
   */
  export type RecordingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * The filter to search for the Recording to update in case it exists.
     */
    where: RecordingWhereUniqueInput
    /**
     * In case the Recording found by the `where` argument doesn't exist, create a new Recording with this data.
     */
    create: XOR<RecordingCreateInput, RecordingUncheckedCreateInput>
    /**
     * In case the Recording was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecordingUpdateInput, RecordingUncheckedUpdateInput>
  }


  /**
   * Recording delete
   */
  export type RecordingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter which Recording to delete.
     */
    where: RecordingWhereUniqueInput
  }


  /**
   * Recording deleteMany
   */
  export type RecordingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recordings to delete
     */
    where?: RecordingWhereInput
  }


  /**
   * Recording without action
   */
  export type RecordingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
  }



  /**
   * Model Season
   */


  export type AggregateSeason = {
    _count: SeasonCountAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  export type SeasonMinAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
    boardConfigId: string | null
  }

  export type SeasonMaxAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
    boardConfigId: string | null
  }

  export type SeasonCountAggregateOutputType = {
    id: number
    name: number
    startDate: number
    endDate: number
    createTimeStamp: number
    updateTimeStamp: number
    boardConfigId: number
    _all: number
  }


  export type SeasonMinAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    boardConfigId?: true
  }

  export type SeasonMaxAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    boardConfigId?: true
  }

  export type SeasonCountAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    boardConfigId?: true
    _all?: true
  }

  export type SeasonAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Season to aggregate.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: Enumerable<SeasonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seasons
    **/
    _count?: true | SeasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonMaxAggregateInputType
  }

  export type GetSeasonAggregateType<T extends SeasonAggregateArgs> = {
        [P in keyof T & keyof AggregateSeason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeason[P]>
      : GetScalarType<T[P], AggregateSeason[P]>
  }




  export type SeasonGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
    orderBy?: Enumerable<SeasonOrderByWithAggregationInput>
    by: SeasonScalarFieldEnum[]
    having?: SeasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonCountAggregateInputType | true
    _min?: SeasonMinAggregateInputType
    _max?: SeasonMaxAggregateInputType
  }


  export type SeasonGroupByOutputType = {
    id: string
    name: string
    startDate: Date
    endDate: Date
    createTimeStamp: Date
    updateTimeStamp: Date
    boardConfigId: string
    _count: SeasonCountAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  type GetSeasonGroupByPayload<T extends SeasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SeasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonGroupByOutputType[P]>
        }
      >
    >


  export type SeasonSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    boardConfigId?: boolean
    highscores?: boolean | Season$highscoresArgs<ExtArgs>
    recordings?: boolean | Season$recordingsArgs<ExtArgs>
    boardConfig?: boolean | BoardConfigArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectScalar = {
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    boardConfigId?: boolean
  }

  export type SeasonInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    highscores?: boolean | Season$highscoresArgs<ExtArgs>
    recordings?: boolean | Season$recordingsArgs<ExtArgs>
    boardConfig?: boolean | BoardConfigArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeArgs<ExtArgs>
  }


  type SeasonGetPayload<S extends boolean | null | undefined | SeasonArgs> = $Types.GetResult<SeasonPayload, S>

  type SeasonCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SeasonFindManyArgs, 'select' | 'include'> & {
      select?: SeasonCountAggregateInputType | true
    }

  export interface SeasonDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Season'], meta: { name: 'Season' } }
    /**
     * Find zero or one Season that matches the filter.
     * @param {SeasonFindUniqueArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeasonFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SeasonFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Season'> extends True ? Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Season that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeasonFindUniqueOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeasonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Season that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeasonFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SeasonFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Season'> extends True ? Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Season that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeasonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Seasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seasons
     * const seasons = await prisma.season.findMany()
     * 
     * // Get first 10 Seasons
     * const seasons = await prisma.season.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seasonWithIdOnly = await prisma.season.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SeasonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Season.
     * @param {SeasonCreateArgs} args - Arguments to create a Season.
     * @example
     * // Create one Season
     * const Season = await prisma.season.create({
     *   data: {
     *     // ... data to create a Season
     *   }
     * })
     * 
    **/
    create<T extends SeasonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonCreateArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Seasons.
     *     @param {SeasonCreateManyArgs} args - Arguments to create many Seasons.
     *     @example
     *     // Create many Seasons
     *     const season = await prisma.season.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SeasonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Season.
     * @param {SeasonDeleteArgs} args - Arguments to delete one Season.
     * @example
     * // Delete one Season
     * const Season = await prisma.season.delete({
     *   where: {
     *     // ... filter to delete one Season
     *   }
     * })
     * 
    **/
    delete<T extends SeasonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonDeleteArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Season.
     * @param {SeasonUpdateArgs} args - Arguments to update one Season.
     * @example
     * // Update one Season
     * const season = await prisma.season.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeasonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpdateArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Seasons.
     * @param {SeasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
     * @example
     * // Delete a few Seasons
     * const { count } = await prisma.season.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeasonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seasons
     * const season = await prisma.season.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeasonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Season.
     * @param {SeasonUpsertArgs} args - Arguments to update or create a Season.
     * @example
     * // Update or create a Season
     * const season = await prisma.season.upsert({
     *   create: {
     *     // ... data to create a Season
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Season we want to update
     *   }
     * })
    **/
    upsert<T extends SeasonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpsertArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Types.GetResult<SeasonPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonCountArgs} args - Arguments to filter Seasons to count.
     * @example
     * // Count the number of Seasons
     * const count = await prisma.season.count({
     *   where: {
     *     // ... the filter for the Seasons we want to count
     *   }
     * })
    **/
    count<T extends SeasonCountArgs>(
      args?: Subset<T, SeasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonAggregateArgs>(args: Subset<T, SeasonAggregateArgs>): Prisma.PrismaPromise<GetSeasonAggregateType<T>>

    /**
     * Group by Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeasonGroupByArgs['orderBy'] }
        : { orderBy?: SeasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Season.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SeasonClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    highscores<T extends Season$highscoresArgs<ExtArgs> = {}>(args?: Subset<T, Season$highscoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<HighscorePayload<ExtArgs>, T, 'findMany', never>| Null>;

    recordings<T extends Season$recordingsArgs<ExtArgs> = {}>(args?: Subset<T, Season$recordingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RecordingPayload<ExtArgs>, T, 'findMany', never>| Null>;

    boardConfig<T extends BoardConfigArgs<ExtArgs> = {}>(args?: Subset<T, BoardConfigArgs<ExtArgs>>): Prisma__BoardConfigClient<$Types.GetResult<BoardConfigPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Season base type for findUnique actions
   */
  export type SeasonFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season findUnique
   */
  export interface SeasonFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SeasonFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Season findUniqueOrThrow
   */
  export type SeasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }


  /**
   * Season base type for findFirst actions
   */
  export type SeasonFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: Enumerable<SeasonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: Enumerable<SeasonScalarFieldEnum>
  }

  /**
   * Season findFirst
   */
  export interface SeasonFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SeasonFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Season findFirstOrThrow
   */
  export type SeasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: Enumerable<SeasonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: Enumerable<SeasonScalarFieldEnum>
  }


  /**
   * Season findMany
   */
  export type SeasonFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Seasons to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: Enumerable<SeasonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    distinct?: Enumerable<SeasonScalarFieldEnum>
  }


  /**
   * Season create
   */
  export type SeasonCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to create a Season.
     */
    data: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
  }


  /**
   * Season createMany
   */
  export type SeasonCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seasons.
     */
    data: Enumerable<SeasonCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Season update
   */
  export type SeasonUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to update a Season.
     */
    data: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
    /**
     * Choose, which Season to update.
     */
    where: SeasonWhereUniqueInput
  }


  /**
   * Season updateMany
   */
  export type SeasonUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seasons.
     */
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyInput>
    /**
     * Filter which Seasons to update
     */
    where?: SeasonWhereInput
  }


  /**
   * Season upsert
   */
  export type SeasonUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The filter to search for the Season to update in case it exists.
     */
    where: SeasonWhereUniqueInput
    /**
     * In case the Season found by the `where` argument doesn't exist, create a new Season with this data.
     */
    create: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
    /**
     * In case the Season was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
  }


  /**
   * Season delete
   */
  export type SeasonDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter which Season to delete.
     */
    where: SeasonWhereUniqueInput
  }


  /**
   * Season deleteMany
   */
  export type SeasonDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seasons to delete
     */
    where?: SeasonWhereInput
  }


  /**
   * Season.highscores
   */
  export type Season$highscoresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highscore
     */
    select?: HighscoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HighscoreInclude<ExtArgs> | null
    where?: HighscoreWhereInput
    orderBy?: Enumerable<HighscoreOrderByWithRelationInput>
    cursor?: HighscoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HighscoreScalarFieldEnum>
  }


  /**
   * Season.recordings
   */
  export type Season$recordingsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecordingInclude<ExtArgs> | null
    where?: RecordingWhereInput
    orderBy?: Enumerable<RecordingOrderByWithRelationInput>
    cursor?: RecordingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RecordingScalarFieldEnum>
  }


  /**
   * Season without action
   */
  export type SeasonArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
  }



  /**
   * Model Team
   */


  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    name: string | null
    abbreviation: string | null
    logotypeUrl: string | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    name: string | null
    abbreviation: string | null
    logotypeUrl: string | null
    createTimeStamp: Date | null
    updateTimeStamp: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    abbreviation: number
    logotypeUrl: number
    createTimeStamp: number
    updateTimeStamp: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    abbreviation?: true
    logotypeUrl?: true
    createTimeStamp?: true
    updateTimeStamp?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    abbreviation?: true
    logotypeUrl?: true
    createTimeStamp?: true
    updateTimeStamp?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    abbreviation?: true
    logotypeUrl?: true
    createTimeStamp?: true
    updateTimeStamp?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: Enumerable<TeamOrderByWithAggregationInput>
    by: TeamScalarFieldEnum[]
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }


  export type TeamGroupByOutputType = {
    id: string
    name: string
    abbreviation: string
    logotypeUrl: string
    createTimeStamp: Date
    updateTimeStamp: Date
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    abbreviation?: boolean
    logotypeUrl?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
    bots?: boolean | Team$botsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    abbreviation?: boolean
    logotypeUrl?: boolean
    createTimeStamp?: boolean
    updateTimeStamp?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    bots?: boolean | Team$botsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeArgs<ExtArgs>
  }


  type TeamGetPayload<S extends boolean | null | undefined | TeamArgs> = $Types.GetResult<TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Team'> extends True ? Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Team'> extends True ? Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamCreateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Teams.
     *     @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     *     @example
     *     // Create many Teams
     *     const team = await prisma.team.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    bots<T extends Team$botsArgs<ExtArgs> = {}>(args?: Subset<T, Team$botsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<BotPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Team base type for findUnique actions
   */
  export type TeamFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUnique
   */
  export interface TeamFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TeamFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team base type for findFirst actions
   */
  export type TeamFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: Enumerable<TeamScalarFieldEnum>
  }

  /**
   * Team findFirst
   */
  export interface TeamFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TeamFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }


  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: Enumerable<TeamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }


  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }


  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }


  /**
   * Team.bots
   */
  export type Team$botsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BotInclude<ExtArgs> | null
    where?: BotWhereInput
    orderBy?: Enumerable<BotOrderByWithRelationInput>
    cursor?: BotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BotScalarFieldEnum>
  }


  /**
   * Team without action
   */
  export type TeamArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BoardConfigScalarFieldEnum: {
    id: 'id',
    inventorySize: 'inventorySize',
    canTackle: 'canTackle',
    teleporters: 'teleporters',
    teleportRelocation: 'teleportRelocation',
    height: 'height',
    width: 'width',
    minimumDelayBetweenMoves: 'minimumDelayBetweenMoves',
    sessionLength: 'sessionLength',
    separateBoards: 'separateBoards',
    dummyBots: 'dummyBots',
    createTimeStamp: 'createTimeStamp',
    updateTimeStamp: 'updateTimeStamp'
  };

  export type BoardConfigScalarFieldEnum = (typeof BoardConfigScalarFieldEnum)[keyof typeof BoardConfigScalarFieldEnum]


  export const BotScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    createTimeStamp: 'createTimeStamp',
    updateTimeStamp: 'updateTimeStamp',
    password: 'password',
    teamId: 'teamId'
  };

  export type BotScalarFieldEnum = (typeof BotScalarFieldEnum)[keyof typeof BotScalarFieldEnum]


  export const HighscoreScalarFieldEnum: {
    id: 'id',
    score: 'score',
    createTimeStamp: 'createTimeStamp',
    updateTimeStamp: 'updateTimeStamp',
    seasonId: 'seasonId',
    botId: 'botId'
  };

  export type HighscoreScalarFieldEnum = (typeof HighscoreScalarFieldEnum)[keyof typeof HighscoreScalarFieldEnum]


  export const RecordingScalarFieldEnum: {
    id: 'id',
    score: 'score',
    board: 'board',
    createTimeStamp: 'createTimeStamp',
    recording: 'recording',
    seasonId: 'seasonId',
    botId: 'botId'
  };

  export type RecordingScalarFieldEnum = (typeof RecordingScalarFieldEnum)[keyof typeof RecordingScalarFieldEnum]


  export const SeasonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    createTimeStamp: 'createTimeStamp',
    updateTimeStamp: 'updateTimeStamp',
    boardConfigId: 'boardConfigId'
  };

  export type SeasonScalarFieldEnum = (typeof SeasonScalarFieldEnum)[keyof typeof SeasonScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    abbreviation: 'abbreviation',
    logotypeUrl: 'logotypeUrl',
    createTimeStamp: 'createTimeStamp',
    updateTimeStamp: 'updateTimeStamp'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type BoardConfigWhereInput = {
    AND?: Enumerable<BoardConfigWhereInput>
    OR?: Enumerable<BoardConfigWhereInput>
    NOT?: Enumerable<BoardConfigWhereInput>
    id?: UuidFilter | string
    inventorySize?: IntFilter | number
    canTackle?: BoolFilter | boolean
    teleporters?: IntFilter | number
    teleportRelocation?: IntFilter | number
    height?: IntFilter | number
    width?: IntFilter | number
    minimumDelayBetweenMoves?: IntFilter | number
    sessionLength?: IntFilter | number
    separateBoards?: BoolFilter | boolean
    dummyBots?: IntFilter | number
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    season?: SeasonListRelationFilter
  }

  export type BoardConfigOrderByWithRelationInput = {
    id?: SortOrder
    inventorySize?: SortOrder
    canTackle?: SortOrder
    teleporters?: SortOrder
    teleportRelocation?: SortOrder
    height?: SortOrder
    width?: SortOrder
    minimumDelayBetweenMoves?: SortOrder
    sessionLength?: SortOrder
    separateBoards?: SortOrder
    dummyBots?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    season?: SeasonOrderByRelationAggregateInput
  }

  export type BoardConfigWhereUniqueInput = {
    id?: string
  }

  export type BoardConfigOrderByWithAggregationInput = {
    id?: SortOrder
    inventorySize?: SortOrder
    canTackle?: SortOrder
    teleporters?: SortOrder
    teleportRelocation?: SortOrder
    height?: SortOrder
    width?: SortOrder
    minimumDelayBetweenMoves?: SortOrder
    sessionLength?: SortOrder
    separateBoards?: SortOrder
    dummyBots?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    _count?: BoardConfigCountOrderByAggregateInput
    _avg?: BoardConfigAvgOrderByAggregateInput
    _max?: BoardConfigMaxOrderByAggregateInput
    _min?: BoardConfigMinOrderByAggregateInput
    _sum?: BoardConfigSumOrderByAggregateInput
  }

  export type BoardConfigScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BoardConfigScalarWhereWithAggregatesInput>
    OR?: Enumerable<BoardConfigScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BoardConfigScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    inventorySize?: IntWithAggregatesFilter | number
    canTackle?: BoolWithAggregatesFilter | boolean
    teleporters?: IntWithAggregatesFilter | number
    teleportRelocation?: IntWithAggregatesFilter | number
    height?: IntWithAggregatesFilter | number
    width?: IntWithAggregatesFilter | number
    minimumDelayBetweenMoves?: IntWithAggregatesFilter | number
    sessionLength?: IntWithAggregatesFilter | number
    separateBoards?: BoolWithAggregatesFilter | boolean
    dummyBots?: IntWithAggregatesFilter | number
    createTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    updateTimeStamp?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BotWhereInput = {
    AND?: Enumerable<BotWhereInput>
    OR?: Enumerable<BotWhereInput>
    NOT?: Enumerable<BotWhereInput>
    id?: UuidFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    password?: StringNullableFilter | string | null
    teamId?: UuidFilter | string
    team?: XOR<TeamRelationFilter, TeamWhereInput> | null
    highscores?: HighscoreListRelationFilter
    recordings?: RecordingListRelationFilter
  }

  export type BotOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    password?: SortOrderInput | SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    highscores?: HighscoreOrderByRelationAggregateInput
    recordings?: RecordingOrderByRelationAggregateInput
  }

  export type BotWhereUniqueInput = {
    id?: string
    name?: string
    email?: string
  }

  export type BotOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    password?: SortOrderInput | SortOrder
    teamId?: SortOrder
    _count?: BotCountOrderByAggregateInput
    _max?: BotMaxOrderByAggregateInput
    _min?: BotMinOrderByAggregateInput
  }

  export type BotScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BotScalarWhereWithAggregatesInput>
    OR?: Enumerable<BotScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BotScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    createTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    updateTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    password?: StringNullableWithAggregatesFilter | string | null
    teamId?: UuidWithAggregatesFilter | string
  }

  export type HighscoreWhereInput = {
    AND?: Enumerable<HighscoreWhereInput>
    OR?: Enumerable<HighscoreWhereInput>
    NOT?: Enumerable<HighscoreWhereInput>
    id?: UuidFilter | string
    score?: IntFilter | number
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    seasonId?: UuidFilter | string
    botId?: UuidFilter | string
    bot?: XOR<BotRelationFilter, BotWhereInput>
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
  }

  export type HighscoreOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
    bot?: BotOrderByWithRelationInput
    season?: SeasonOrderByWithRelationInput
  }

  export type HighscoreWhereUniqueInput = {
    id?: string
    seasonId_botId?: HighscoreSeasonIdBotIdCompoundUniqueInput
  }

  export type HighscoreOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
    _count?: HighscoreCountOrderByAggregateInput
    _avg?: HighscoreAvgOrderByAggregateInput
    _max?: HighscoreMaxOrderByAggregateInput
    _min?: HighscoreMinOrderByAggregateInput
    _sum?: HighscoreSumOrderByAggregateInput
  }

  export type HighscoreScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HighscoreScalarWhereWithAggregatesInput>
    OR?: Enumerable<HighscoreScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HighscoreScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    score?: IntWithAggregatesFilter | number
    createTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    updateTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    seasonId?: UuidWithAggregatesFilter | string
    botId?: UuidWithAggregatesFilter | string
  }

  export type RecordingWhereInput = {
    AND?: Enumerable<RecordingWhereInput>
    OR?: Enumerable<RecordingWhereInput>
    NOT?: Enumerable<RecordingWhereInput>
    id?: UuidFilter | string
    score?: IntFilter | number
    board?: IntFilter | number
    createTimeStamp?: DateTimeFilter | Date | string
    recording?: StringFilter | string
    seasonId?: UuidFilter | string
    botId?: UuidFilter | string
    bot?: XOR<BotRelationFilter, BotWhereInput>
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
  }

  export type RecordingOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    board?: SortOrder
    createTimeStamp?: SortOrder
    recording?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
    bot?: BotOrderByWithRelationInput
    season?: SeasonOrderByWithRelationInput
  }

  export type RecordingWhereUniqueInput = {
    id?: string
  }

  export type RecordingOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    board?: SortOrder
    createTimeStamp?: SortOrder
    recording?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
    _count?: RecordingCountOrderByAggregateInput
    _avg?: RecordingAvgOrderByAggregateInput
    _max?: RecordingMaxOrderByAggregateInput
    _min?: RecordingMinOrderByAggregateInput
    _sum?: RecordingSumOrderByAggregateInput
  }

  export type RecordingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RecordingScalarWhereWithAggregatesInput>
    OR?: Enumerable<RecordingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RecordingScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    score?: IntWithAggregatesFilter | number
    board?: IntWithAggregatesFilter | number
    createTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    recording?: StringWithAggregatesFilter | string
    seasonId?: UuidWithAggregatesFilter | string
    botId?: UuidWithAggregatesFilter | string
  }

  export type SeasonWhereInput = {
    AND?: Enumerable<SeasonWhereInput>
    OR?: Enumerable<SeasonWhereInput>
    NOT?: Enumerable<SeasonWhereInput>
    id?: UuidFilter | string
    name?: StringFilter | string
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    boardConfigId?: UuidFilter | string
    highscores?: HighscoreListRelationFilter
    recordings?: RecordingListRelationFilter
    boardConfig?: XOR<BoardConfigRelationFilter, BoardConfigWhereInput>
  }

  export type SeasonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    boardConfigId?: SortOrder
    highscores?: HighscoreOrderByRelationAggregateInput
    recordings?: RecordingOrderByRelationAggregateInput
    boardConfig?: BoardConfigOrderByWithRelationInput
  }

  export type SeasonWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type SeasonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    boardConfigId?: SortOrder
    _count?: SeasonCountOrderByAggregateInput
    _max?: SeasonMaxOrderByAggregateInput
    _min?: SeasonMinOrderByAggregateInput
  }

  export type SeasonScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SeasonScalarWhereWithAggregatesInput>
    OR?: Enumerable<SeasonScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SeasonScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    createTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    updateTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    boardConfigId?: UuidWithAggregatesFilter | string
  }

  export type TeamWhereInput = {
    AND?: Enumerable<TeamWhereInput>
    OR?: Enumerable<TeamWhereInput>
    NOT?: Enumerable<TeamWhereInput>
    id?: UuidFilter | string
    name?: StringFilter | string
    abbreviation?: StringFilter | string
    logotypeUrl?: StringFilter | string
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    bots?: BotListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    logotypeUrl?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    bots?: BotOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = {
    id?: string
  }

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    logotypeUrl?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    abbreviation?: StringWithAggregatesFilter | string
    logotypeUrl?: StringWithAggregatesFilter | string
    createTimeStamp?: DateTimeWithAggregatesFilter | Date | string
    updateTimeStamp?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BoardConfigCreateInput = {
    id?: string
    inventorySize?: number
    canTackle?: boolean
    teleporters?: number
    teleportRelocation?: number
    height?: number
    width?: number
    minimumDelayBetweenMoves?: number
    sessionLength?: number
    separateBoards?: boolean
    dummyBots?: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    season?: SeasonCreateNestedManyWithoutBoardConfigInput
  }

  export type BoardConfigUncheckedCreateInput = {
    id?: string
    inventorySize?: number
    canTackle?: boolean
    teleporters?: number
    teleportRelocation?: number
    height?: number
    width?: number
    minimumDelayBetweenMoves?: number
    sessionLength?: number
    separateBoards?: boolean
    dummyBots?: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    season?: SeasonUncheckedCreateNestedManyWithoutBoardConfigInput
  }

  export type BoardConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventorySize?: IntFieldUpdateOperationsInput | number
    canTackle?: BoolFieldUpdateOperationsInput | boolean
    teleporters?: IntFieldUpdateOperationsInput | number
    teleportRelocation?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    minimumDelayBetweenMoves?: IntFieldUpdateOperationsInput | number
    sessionLength?: IntFieldUpdateOperationsInput | number
    separateBoards?: BoolFieldUpdateOperationsInput | boolean
    dummyBots?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUpdateManyWithoutBoardConfigNestedInput
  }

  export type BoardConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventorySize?: IntFieldUpdateOperationsInput | number
    canTackle?: BoolFieldUpdateOperationsInput | boolean
    teleporters?: IntFieldUpdateOperationsInput | number
    teleportRelocation?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    minimumDelayBetweenMoves?: IntFieldUpdateOperationsInput | number
    sessionLength?: IntFieldUpdateOperationsInput | number
    separateBoards?: BoolFieldUpdateOperationsInput | boolean
    dummyBots?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUncheckedUpdateManyWithoutBoardConfigNestedInput
  }

  export type BoardConfigCreateManyInput = {
    id?: string
    inventorySize?: number
    canTackle?: boolean
    teleporters?: number
    teleportRelocation?: number
    height?: number
    width?: number
    minimumDelayBetweenMoves?: number
    sessionLength?: number
    separateBoards?: boolean
    dummyBots?: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
  }

  export type BoardConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventorySize?: IntFieldUpdateOperationsInput | number
    canTackle?: BoolFieldUpdateOperationsInput | boolean
    teleporters?: IntFieldUpdateOperationsInput | number
    teleportRelocation?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    minimumDelayBetweenMoves?: IntFieldUpdateOperationsInput | number
    sessionLength?: IntFieldUpdateOperationsInput | number
    separateBoards?: BoolFieldUpdateOperationsInput | boolean
    dummyBots?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventorySize?: IntFieldUpdateOperationsInput | number
    canTackle?: BoolFieldUpdateOperationsInput | boolean
    teleporters?: IntFieldUpdateOperationsInput | number
    teleportRelocation?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    minimumDelayBetweenMoves?: IntFieldUpdateOperationsInput | number
    sessionLength?: IntFieldUpdateOperationsInput | number
    separateBoards?: BoolFieldUpdateOperationsInput | boolean
    dummyBots?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotCreateInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    team?: TeamCreateNestedOneWithoutBotsInput
    highscores?: HighscoreCreateNestedManyWithoutBotInput
    recordings?: RecordingCreateNestedManyWithoutBotInput
  }

  export type BotUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    teamId: string
    highscores?: HighscoreUncheckedCreateNestedManyWithoutBotInput
    recordings?: RecordingUncheckedCreateNestedManyWithoutBotInput
  }

  export type BotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneWithoutBotsNestedInput
    highscores?: HighscoreUpdateManyWithoutBotNestedInput
    recordings?: RecordingUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
    highscores?: HighscoreUncheckedUpdateManyWithoutBotNestedInput
    recordings?: RecordingUncheckedUpdateManyWithoutBotNestedInput
  }

  export type BotCreateManyInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    teamId: string
  }

  export type BotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type HighscoreCreateInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    bot: BotCreateNestedOneWithoutHighscoresInput
    season: SeasonCreateNestedOneWithoutHighscoresInput
  }

  export type HighscoreUncheckedCreateInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    seasonId: string
    botId: string
  }

  export type HighscoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    bot?: BotUpdateOneRequiredWithoutHighscoresNestedInput
    season?: SeasonUpdateOneRequiredWithoutHighscoresNestedInput
  }

  export type HighscoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    seasonId?: StringFieldUpdateOperationsInput | string
    botId?: StringFieldUpdateOperationsInput | string
  }

  export type HighscoreCreateManyInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    seasonId: string
    botId: string
  }

  export type HighscoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HighscoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    seasonId?: StringFieldUpdateOperationsInput | string
    botId?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingCreateInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    bot: BotCreateNestedOneWithoutRecordingsInput
    season: SeasonCreateNestedOneWithoutRecordingsInput
  }

  export type RecordingUncheckedCreateInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    seasonId: string
    botId: string
  }

  export type RecordingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    bot?: BotUpdateOneRequiredWithoutRecordingsNestedInput
    season?: SeasonUpdateOneRequiredWithoutRecordingsNestedInput
  }

  export type RecordingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    botId?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingCreateManyInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    seasonId: string
    botId: string
  }

  export type RecordingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    botId?: StringFieldUpdateOperationsInput | string
  }

  export type SeasonCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    highscores?: HighscoreCreateNestedManyWithoutSeasonInput
    recordings?: RecordingCreateNestedManyWithoutSeasonInput
    boardConfig: BoardConfigCreateNestedOneWithoutSeasonInput
  }

  export type SeasonUncheckedCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    boardConfigId: string
    highscores?: HighscoreUncheckedCreateNestedManyWithoutSeasonInput
    recordings?: RecordingUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    highscores?: HighscoreUpdateManyWithoutSeasonNestedInput
    recordings?: RecordingUpdateManyWithoutSeasonNestedInput
    boardConfig?: BoardConfigUpdateOneRequiredWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    boardConfigId?: StringFieldUpdateOperationsInput | string
    highscores?: HighscoreUncheckedUpdateManyWithoutSeasonNestedInput
    recordings?: RecordingUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonCreateManyInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    boardConfigId: string
  }

  export type SeasonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    boardConfigId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateInput = {
    id?: string
    name: string
    abbreviation: string
    logotypeUrl: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    bots?: BotCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    name: string
    abbreviation: string
    logotypeUrl: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    bots?: BotUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    logotypeUrl?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    bots?: BotUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    logotypeUrl?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    bots?: BotUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    name: string
    abbreviation: string
    logotypeUrl: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    logotypeUrl?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    logotypeUrl?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SeasonListRelationFilter = {
    every?: SeasonWhereInput
    some?: SeasonWhereInput
    none?: SeasonWhereInput
  }

  export type SeasonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardConfigCountOrderByAggregateInput = {
    id?: SortOrder
    inventorySize?: SortOrder
    canTackle?: SortOrder
    teleporters?: SortOrder
    teleportRelocation?: SortOrder
    height?: SortOrder
    width?: SortOrder
    minimumDelayBetweenMoves?: SortOrder
    sessionLength?: SortOrder
    separateBoards?: SortOrder
    dummyBots?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
  }

  export type BoardConfigAvgOrderByAggregateInput = {
    inventorySize?: SortOrder
    teleporters?: SortOrder
    teleportRelocation?: SortOrder
    height?: SortOrder
    width?: SortOrder
    minimumDelayBetweenMoves?: SortOrder
    sessionLength?: SortOrder
    dummyBots?: SortOrder
  }

  export type BoardConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    inventorySize?: SortOrder
    canTackle?: SortOrder
    teleporters?: SortOrder
    teleportRelocation?: SortOrder
    height?: SortOrder
    width?: SortOrder
    minimumDelayBetweenMoves?: SortOrder
    sessionLength?: SortOrder
    separateBoards?: SortOrder
    dummyBots?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
  }

  export type BoardConfigMinOrderByAggregateInput = {
    id?: SortOrder
    inventorySize?: SortOrder
    canTackle?: SortOrder
    teleporters?: SortOrder
    teleportRelocation?: SortOrder
    height?: SortOrder
    width?: SortOrder
    minimumDelayBetweenMoves?: SortOrder
    sessionLength?: SortOrder
    separateBoards?: SortOrder
    dummyBots?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
  }

  export type BoardConfigSumOrderByAggregateInput = {
    inventorySize?: SortOrder
    teleporters?: SortOrder
    teleportRelocation?: SortOrder
    height?: SortOrder
    width?: SortOrder
    minimumDelayBetweenMoves?: SortOrder
    sessionLength?: SortOrder
    dummyBots?: SortOrder
  }

  export type UuidWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type HighscoreListRelationFilter = {
    every?: HighscoreWhereInput
    some?: HighscoreWhereInput
    none?: HighscoreWhereInput
  }

  export type RecordingListRelationFilter = {
    every?: RecordingWhereInput
    some?: RecordingWhereInput
    none?: RecordingWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HighscoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecordingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BotCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    password?: SortOrder
    teamId?: SortOrder
  }

  export type BotMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    password?: SortOrder
    teamId?: SortOrder
  }

  export type BotMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    password?: SortOrder
    teamId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BotRelationFilter = {
    is?: BotWhereInput | null
    isNot?: BotWhereInput | null
  }

  export type SeasonRelationFilter = {
    is?: SeasonWhereInput | null
    isNot?: SeasonWhereInput | null
  }

  export type HighscoreSeasonIdBotIdCompoundUniqueInput = {
    seasonId: string
    botId: string
  }

  export type HighscoreCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
  }

  export type HighscoreAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type HighscoreMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
  }

  export type HighscoreMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
  }

  export type HighscoreSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type RecordingCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    board?: SortOrder
    createTimeStamp?: SortOrder
    recording?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
  }

  export type RecordingAvgOrderByAggregateInput = {
    score?: SortOrder
    board?: SortOrder
  }

  export type RecordingMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    board?: SortOrder
    createTimeStamp?: SortOrder
    recording?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
  }

  export type RecordingMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    board?: SortOrder
    createTimeStamp?: SortOrder
    recording?: SortOrder
    seasonId?: SortOrder
    botId?: SortOrder
  }

  export type RecordingSumOrderByAggregateInput = {
    score?: SortOrder
    board?: SortOrder
  }

  export type BoardConfigRelationFilter = {
    is?: BoardConfigWhereInput | null
    isNot?: BoardConfigWhereInput | null
  }

  export type SeasonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    boardConfigId?: SortOrder
  }

  export type SeasonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    boardConfigId?: SortOrder
  }

  export type SeasonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
    boardConfigId?: SortOrder
  }

  export type BotListRelationFilter = {
    every?: BotWhereInput
    some?: BotWhereInput
    none?: BotWhereInput
  }

  export type BotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    logotypeUrl?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    logotypeUrl?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    logotypeUrl?: SortOrder
    createTimeStamp?: SortOrder
    updateTimeStamp?: SortOrder
  }

  export type SeasonCreateNestedManyWithoutBoardConfigInput = {
    create?: XOR<Enumerable<SeasonCreateWithoutBoardConfigInput>, Enumerable<SeasonUncheckedCreateWithoutBoardConfigInput>>
    connectOrCreate?: Enumerable<SeasonCreateOrConnectWithoutBoardConfigInput>
    createMany?: SeasonCreateManyBoardConfigInputEnvelope
    connect?: Enumerable<SeasonWhereUniqueInput>
  }

  export type SeasonUncheckedCreateNestedManyWithoutBoardConfigInput = {
    create?: XOR<Enumerable<SeasonCreateWithoutBoardConfigInput>, Enumerable<SeasonUncheckedCreateWithoutBoardConfigInput>>
    connectOrCreate?: Enumerable<SeasonCreateOrConnectWithoutBoardConfigInput>
    createMany?: SeasonCreateManyBoardConfigInputEnvelope
    connect?: Enumerable<SeasonWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SeasonUpdateManyWithoutBoardConfigNestedInput = {
    create?: XOR<Enumerable<SeasonCreateWithoutBoardConfigInput>, Enumerable<SeasonUncheckedCreateWithoutBoardConfigInput>>
    connectOrCreate?: Enumerable<SeasonCreateOrConnectWithoutBoardConfigInput>
    upsert?: Enumerable<SeasonUpsertWithWhereUniqueWithoutBoardConfigInput>
    createMany?: SeasonCreateManyBoardConfigInputEnvelope
    set?: Enumerable<SeasonWhereUniqueInput>
    disconnect?: Enumerable<SeasonWhereUniqueInput>
    delete?: Enumerable<SeasonWhereUniqueInput>
    connect?: Enumerable<SeasonWhereUniqueInput>
    update?: Enumerable<SeasonUpdateWithWhereUniqueWithoutBoardConfigInput>
    updateMany?: Enumerable<SeasonUpdateManyWithWhereWithoutBoardConfigInput>
    deleteMany?: Enumerable<SeasonScalarWhereInput>
  }

  export type SeasonUncheckedUpdateManyWithoutBoardConfigNestedInput = {
    create?: XOR<Enumerable<SeasonCreateWithoutBoardConfigInput>, Enumerable<SeasonUncheckedCreateWithoutBoardConfigInput>>
    connectOrCreate?: Enumerable<SeasonCreateOrConnectWithoutBoardConfigInput>
    upsert?: Enumerable<SeasonUpsertWithWhereUniqueWithoutBoardConfigInput>
    createMany?: SeasonCreateManyBoardConfigInputEnvelope
    set?: Enumerable<SeasonWhereUniqueInput>
    disconnect?: Enumerable<SeasonWhereUniqueInput>
    delete?: Enumerable<SeasonWhereUniqueInput>
    connect?: Enumerable<SeasonWhereUniqueInput>
    update?: Enumerable<SeasonUpdateWithWhereUniqueWithoutBoardConfigInput>
    updateMany?: Enumerable<SeasonUpdateManyWithWhereWithoutBoardConfigInput>
    deleteMany?: Enumerable<SeasonScalarWhereInput>
  }

  export type TeamCreateNestedOneWithoutBotsInput = {
    create?: XOR<TeamCreateWithoutBotsInput, TeamUncheckedCreateWithoutBotsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutBotsInput
    connect?: TeamWhereUniqueInput
  }

  export type HighscoreCreateNestedManyWithoutBotInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutBotInput>, Enumerable<HighscoreUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutBotInput>
    createMany?: HighscoreCreateManyBotInputEnvelope
    connect?: Enumerable<HighscoreWhereUniqueInput>
  }

  export type RecordingCreateNestedManyWithoutBotInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutBotInput>, Enumerable<RecordingUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutBotInput>
    createMany?: RecordingCreateManyBotInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type HighscoreUncheckedCreateNestedManyWithoutBotInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutBotInput>, Enumerable<HighscoreUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutBotInput>
    createMany?: HighscoreCreateManyBotInputEnvelope
    connect?: Enumerable<HighscoreWhereUniqueInput>
  }

  export type RecordingUncheckedCreateNestedManyWithoutBotInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutBotInput>, Enumerable<RecordingUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutBotInput>
    createMany?: RecordingCreateManyBotInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TeamUpdateOneWithoutBotsNestedInput = {
    create?: XOR<TeamCreateWithoutBotsInput, TeamUncheckedCreateWithoutBotsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutBotsInput
    upsert?: TeamUpsertWithoutBotsInput
    disconnect?: boolean
    delete?: boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutBotsInput, TeamUncheckedUpdateWithoutBotsInput>
  }

  export type HighscoreUpdateManyWithoutBotNestedInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutBotInput>, Enumerable<HighscoreUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutBotInput>
    upsert?: Enumerable<HighscoreUpsertWithWhereUniqueWithoutBotInput>
    createMany?: HighscoreCreateManyBotInputEnvelope
    set?: Enumerable<HighscoreWhereUniqueInput>
    disconnect?: Enumerable<HighscoreWhereUniqueInput>
    delete?: Enumerable<HighscoreWhereUniqueInput>
    connect?: Enumerable<HighscoreWhereUniqueInput>
    update?: Enumerable<HighscoreUpdateWithWhereUniqueWithoutBotInput>
    updateMany?: Enumerable<HighscoreUpdateManyWithWhereWithoutBotInput>
    deleteMany?: Enumerable<HighscoreScalarWhereInput>
  }

  export type RecordingUpdateManyWithoutBotNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutBotInput>, Enumerable<RecordingUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutBotInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutBotInput>
    createMany?: RecordingCreateManyBotInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutBotInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutBotInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type HighscoreUncheckedUpdateManyWithoutBotNestedInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutBotInput>, Enumerable<HighscoreUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutBotInput>
    upsert?: Enumerable<HighscoreUpsertWithWhereUniqueWithoutBotInput>
    createMany?: HighscoreCreateManyBotInputEnvelope
    set?: Enumerable<HighscoreWhereUniqueInput>
    disconnect?: Enumerable<HighscoreWhereUniqueInput>
    delete?: Enumerable<HighscoreWhereUniqueInput>
    connect?: Enumerable<HighscoreWhereUniqueInput>
    update?: Enumerable<HighscoreUpdateWithWhereUniqueWithoutBotInput>
    updateMany?: Enumerable<HighscoreUpdateManyWithWhereWithoutBotInput>
    deleteMany?: Enumerable<HighscoreScalarWhereInput>
  }

  export type RecordingUncheckedUpdateManyWithoutBotNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutBotInput>, Enumerable<RecordingUncheckedCreateWithoutBotInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutBotInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutBotInput>
    createMany?: RecordingCreateManyBotInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutBotInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutBotInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type BotCreateNestedOneWithoutHighscoresInput = {
    create?: XOR<BotCreateWithoutHighscoresInput, BotUncheckedCreateWithoutHighscoresInput>
    connectOrCreate?: BotCreateOrConnectWithoutHighscoresInput
    connect?: BotWhereUniqueInput
  }

  export type SeasonCreateNestedOneWithoutHighscoresInput = {
    create?: XOR<SeasonCreateWithoutHighscoresInput, SeasonUncheckedCreateWithoutHighscoresInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutHighscoresInput
    connect?: SeasonWhereUniqueInput
  }

  export type BotUpdateOneRequiredWithoutHighscoresNestedInput = {
    create?: XOR<BotCreateWithoutHighscoresInput, BotUncheckedCreateWithoutHighscoresInput>
    connectOrCreate?: BotCreateOrConnectWithoutHighscoresInput
    upsert?: BotUpsertWithoutHighscoresInput
    connect?: BotWhereUniqueInput
    update?: XOR<BotUpdateWithoutHighscoresInput, BotUncheckedUpdateWithoutHighscoresInput>
  }

  export type SeasonUpdateOneRequiredWithoutHighscoresNestedInput = {
    create?: XOR<SeasonCreateWithoutHighscoresInput, SeasonUncheckedCreateWithoutHighscoresInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutHighscoresInput
    upsert?: SeasonUpsertWithoutHighscoresInput
    connect?: SeasonWhereUniqueInput
    update?: XOR<SeasonUpdateWithoutHighscoresInput, SeasonUncheckedUpdateWithoutHighscoresInput>
  }

  export type BotCreateNestedOneWithoutRecordingsInput = {
    create?: XOR<BotCreateWithoutRecordingsInput, BotUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: BotCreateOrConnectWithoutRecordingsInput
    connect?: BotWhereUniqueInput
  }

  export type SeasonCreateNestedOneWithoutRecordingsInput = {
    create?: XOR<SeasonCreateWithoutRecordingsInput, SeasonUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutRecordingsInput
    connect?: SeasonWhereUniqueInput
  }

  export type BotUpdateOneRequiredWithoutRecordingsNestedInput = {
    create?: XOR<BotCreateWithoutRecordingsInput, BotUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: BotCreateOrConnectWithoutRecordingsInput
    upsert?: BotUpsertWithoutRecordingsInput
    connect?: BotWhereUniqueInput
    update?: XOR<BotUpdateWithoutRecordingsInput, BotUncheckedUpdateWithoutRecordingsInput>
  }

  export type SeasonUpdateOneRequiredWithoutRecordingsNestedInput = {
    create?: XOR<SeasonCreateWithoutRecordingsInput, SeasonUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutRecordingsInput
    upsert?: SeasonUpsertWithoutRecordingsInput
    connect?: SeasonWhereUniqueInput
    update?: XOR<SeasonUpdateWithoutRecordingsInput, SeasonUncheckedUpdateWithoutRecordingsInput>
  }

  export type HighscoreCreateNestedManyWithoutSeasonInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutSeasonInput>, Enumerable<HighscoreUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutSeasonInput>
    createMany?: HighscoreCreateManySeasonInputEnvelope
    connect?: Enumerable<HighscoreWhereUniqueInput>
  }

  export type RecordingCreateNestedManyWithoutSeasonInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutSeasonInput>, Enumerable<RecordingUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutSeasonInput>
    createMany?: RecordingCreateManySeasonInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type BoardConfigCreateNestedOneWithoutSeasonInput = {
    create?: XOR<BoardConfigCreateWithoutSeasonInput, BoardConfigUncheckedCreateWithoutSeasonInput>
    connectOrCreate?: BoardConfigCreateOrConnectWithoutSeasonInput
    connect?: BoardConfigWhereUniqueInput
  }

  export type HighscoreUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutSeasonInput>, Enumerable<HighscoreUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutSeasonInput>
    createMany?: HighscoreCreateManySeasonInputEnvelope
    connect?: Enumerable<HighscoreWhereUniqueInput>
  }

  export type RecordingUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutSeasonInput>, Enumerable<RecordingUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutSeasonInput>
    createMany?: RecordingCreateManySeasonInputEnvelope
    connect?: Enumerable<RecordingWhereUniqueInput>
  }

  export type HighscoreUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutSeasonInput>, Enumerable<HighscoreUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutSeasonInput>
    upsert?: Enumerable<HighscoreUpsertWithWhereUniqueWithoutSeasonInput>
    createMany?: HighscoreCreateManySeasonInputEnvelope
    set?: Enumerable<HighscoreWhereUniqueInput>
    disconnect?: Enumerable<HighscoreWhereUniqueInput>
    delete?: Enumerable<HighscoreWhereUniqueInput>
    connect?: Enumerable<HighscoreWhereUniqueInput>
    update?: Enumerable<HighscoreUpdateWithWhereUniqueWithoutSeasonInput>
    updateMany?: Enumerable<HighscoreUpdateManyWithWhereWithoutSeasonInput>
    deleteMany?: Enumerable<HighscoreScalarWhereInput>
  }

  export type RecordingUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutSeasonInput>, Enumerable<RecordingUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutSeasonInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutSeasonInput>
    createMany?: RecordingCreateManySeasonInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutSeasonInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutSeasonInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type BoardConfigUpdateOneRequiredWithoutSeasonNestedInput = {
    create?: XOR<BoardConfigCreateWithoutSeasonInput, BoardConfigUncheckedCreateWithoutSeasonInput>
    connectOrCreate?: BoardConfigCreateOrConnectWithoutSeasonInput
    upsert?: BoardConfigUpsertWithoutSeasonInput
    connect?: BoardConfigWhereUniqueInput
    update?: XOR<BoardConfigUpdateWithoutSeasonInput, BoardConfigUncheckedUpdateWithoutSeasonInput>
  }

  export type HighscoreUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<Enumerable<HighscoreCreateWithoutSeasonInput>, Enumerable<HighscoreUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<HighscoreCreateOrConnectWithoutSeasonInput>
    upsert?: Enumerable<HighscoreUpsertWithWhereUniqueWithoutSeasonInput>
    createMany?: HighscoreCreateManySeasonInputEnvelope
    set?: Enumerable<HighscoreWhereUniqueInput>
    disconnect?: Enumerable<HighscoreWhereUniqueInput>
    delete?: Enumerable<HighscoreWhereUniqueInput>
    connect?: Enumerable<HighscoreWhereUniqueInput>
    update?: Enumerable<HighscoreUpdateWithWhereUniqueWithoutSeasonInput>
    updateMany?: Enumerable<HighscoreUpdateManyWithWhereWithoutSeasonInput>
    deleteMany?: Enumerable<HighscoreScalarWhereInput>
  }

  export type RecordingUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<Enumerable<RecordingCreateWithoutSeasonInput>, Enumerable<RecordingUncheckedCreateWithoutSeasonInput>>
    connectOrCreate?: Enumerable<RecordingCreateOrConnectWithoutSeasonInput>
    upsert?: Enumerable<RecordingUpsertWithWhereUniqueWithoutSeasonInput>
    createMany?: RecordingCreateManySeasonInputEnvelope
    set?: Enumerable<RecordingWhereUniqueInput>
    disconnect?: Enumerable<RecordingWhereUniqueInput>
    delete?: Enumerable<RecordingWhereUniqueInput>
    connect?: Enumerable<RecordingWhereUniqueInput>
    update?: Enumerable<RecordingUpdateWithWhereUniqueWithoutSeasonInput>
    updateMany?: Enumerable<RecordingUpdateManyWithWhereWithoutSeasonInput>
    deleteMany?: Enumerable<RecordingScalarWhereInput>
  }

  export type BotCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<BotCreateWithoutTeamInput>, Enumerable<BotUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<BotCreateOrConnectWithoutTeamInput>
    createMany?: BotCreateManyTeamInputEnvelope
    connect?: Enumerable<BotWhereUniqueInput>
  }

  export type BotUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<BotCreateWithoutTeamInput>, Enumerable<BotUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<BotCreateOrConnectWithoutTeamInput>
    createMany?: BotCreateManyTeamInputEnvelope
    connect?: Enumerable<BotWhereUniqueInput>
  }

  export type BotUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<BotCreateWithoutTeamInput>, Enumerable<BotUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<BotCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<BotUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: BotCreateManyTeamInputEnvelope
    set?: Enumerable<BotWhereUniqueInput>
    disconnect?: Enumerable<BotWhereUniqueInput>
    delete?: Enumerable<BotWhereUniqueInput>
    connect?: Enumerable<BotWhereUniqueInput>
    update?: Enumerable<BotUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<BotUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<BotScalarWhereInput>
  }

  export type BotUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<BotCreateWithoutTeamInput>, Enumerable<BotUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<BotCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<BotUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: BotCreateManyTeamInputEnvelope
    set?: Enumerable<BotWhereUniqueInput>
    disconnect?: Enumerable<BotWhereUniqueInput>
    delete?: Enumerable<BotWhereUniqueInput>
    connect?: Enumerable<BotWhereUniqueInput>
    update?: Enumerable<BotUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<BotUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<BotScalarWhereInput>
  }

  export type NestedUuidFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedUuidWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type SeasonCreateWithoutBoardConfigInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    highscores?: HighscoreCreateNestedManyWithoutSeasonInput
    recordings?: RecordingCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutBoardConfigInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    highscores?: HighscoreUncheckedCreateNestedManyWithoutSeasonInput
    recordings?: RecordingUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutBoardConfigInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutBoardConfigInput, SeasonUncheckedCreateWithoutBoardConfigInput>
  }

  export type SeasonCreateManyBoardConfigInputEnvelope = {
    data: Enumerable<SeasonCreateManyBoardConfigInput>
    skipDuplicates?: boolean
  }

  export type SeasonUpsertWithWhereUniqueWithoutBoardConfigInput = {
    where: SeasonWhereUniqueInput
    update: XOR<SeasonUpdateWithoutBoardConfigInput, SeasonUncheckedUpdateWithoutBoardConfigInput>
    create: XOR<SeasonCreateWithoutBoardConfigInput, SeasonUncheckedCreateWithoutBoardConfigInput>
  }

  export type SeasonUpdateWithWhereUniqueWithoutBoardConfigInput = {
    where: SeasonWhereUniqueInput
    data: XOR<SeasonUpdateWithoutBoardConfigInput, SeasonUncheckedUpdateWithoutBoardConfigInput>
  }

  export type SeasonUpdateManyWithWhereWithoutBoardConfigInput = {
    where: SeasonScalarWhereInput
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyWithoutSeasonInput>
  }

  export type SeasonScalarWhereInput = {
    AND?: Enumerable<SeasonScalarWhereInput>
    OR?: Enumerable<SeasonScalarWhereInput>
    NOT?: Enumerable<SeasonScalarWhereInput>
    id?: UuidFilter | string
    name?: StringFilter | string
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    boardConfigId?: UuidFilter | string
  }

  export type TeamCreateWithoutBotsInput = {
    id?: string
    name: string
    abbreviation: string
    logotypeUrl: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
  }

  export type TeamUncheckedCreateWithoutBotsInput = {
    id?: string
    name: string
    abbreviation: string
    logotypeUrl: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
  }

  export type TeamCreateOrConnectWithoutBotsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutBotsInput, TeamUncheckedCreateWithoutBotsInput>
  }

  export type HighscoreCreateWithoutBotInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    season: SeasonCreateNestedOneWithoutHighscoresInput
  }

  export type HighscoreUncheckedCreateWithoutBotInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    seasonId: string
  }

  export type HighscoreCreateOrConnectWithoutBotInput = {
    where: HighscoreWhereUniqueInput
    create: XOR<HighscoreCreateWithoutBotInput, HighscoreUncheckedCreateWithoutBotInput>
  }

  export type HighscoreCreateManyBotInputEnvelope = {
    data: Enumerable<HighscoreCreateManyBotInput>
    skipDuplicates?: boolean
  }

  export type RecordingCreateWithoutBotInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    season: SeasonCreateNestedOneWithoutRecordingsInput
  }

  export type RecordingUncheckedCreateWithoutBotInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    seasonId: string
  }

  export type RecordingCreateOrConnectWithoutBotInput = {
    where: RecordingWhereUniqueInput
    create: XOR<RecordingCreateWithoutBotInput, RecordingUncheckedCreateWithoutBotInput>
  }

  export type RecordingCreateManyBotInputEnvelope = {
    data: Enumerable<RecordingCreateManyBotInput>
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutBotsInput = {
    update: XOR<TeamUpdateWithoutBotsInput, TeamUncheckedUpdateWithoutBotsInput>
    create: XOR<TeamCreateWithoutBotsInput, TeamUncheckedCreateWithoutBotsInput>
  }

  export type TeamUpdateWithoutBotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    logotypeUrl?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateWithoutBotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    logotypeUrl?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HighscoreUpsertWithWhereUniqueWithoutBotInput = {
    where: HighscoreWhereUniqueInput
    update: XOR<HighscoreUpdateWithoutBotInput, HighscoreUncheckedUpdateWithoutBotInput>
    create: XOR<HighscoreCreateWithoutBotInput, HighscoreUncheckedCreateWithoutBotInput>
  }

  export type HighscoreUpdateWithWhereUniqueWithoutBotInput = {
    where: HighscoreWhereUniqueInput
    data: XOR<HighscoreUpdateWithoutBotInput, HighscoreUncheckedUpdateWithoutBotInput>
  }

  export type HighscoreUpdateManyWithWhereWithoutBotInput = {
    where: HighscoreScalarWhereInput
    data: XOR<HighscoreUpdateManyMutationInput, HighscoreUncheckedUpdateManyWithoutHighscoresInput>
  }

  export type HighscoreScalarWhereInput = {
    AND?: Enumerable<HighscoreScalarWhereInput>
    OR?: Enumerable<HighscoreScalarWhereInput>
    NOT?: Enumerable<HighscoreScalarWhereInput>
    id?: UuidFilter | string
    score?: IntFilter | number
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    seasonId?: UuidFilter | string
    botId?: UuidFilter | string
  }

  export type RecordingUpsertWithWhereUniqueWithoutBotInput = {
    where: RecordingWhereUniqueInput
    update: XOR<RecordingUpdateWithoutBotInput, RecordingUncheckedUpdateWithoutBotInput>
    create: XOR<RecordingCreateWithoutBotInput, RecordingUncheckedCreateWithoutBotInput>
  }

  export type RecordingUpdateWithWhereUniqueWithoutBotInput = {
    where: RecordingWhereUniqueInput
    data: XOR<RecordingUpdateWithoutBotInput, RecordingUncheckedUpdateWithoutBotInput>
  }

  export type RecordingUpdateManyWithWhereWithoutBotInput = {
    where: RecordingScalarWhereInput
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyWithoutRecordingsInput>
  }

  export type RecordingScalarWhereInput = {
    AND?: Enumerable<RecordingScalarWhereInput>
    OR?: Enumerable<RecordingScalarWhereInput>
    NOT?: Enumerable<RecordingScalarWhereInput>
    id?: UuidFilter | string
    score?: IntFilter | number
    board?: IntFilter | number
    createTimeStamp?: DateTimeFilter | Date | string
    recording?: StringFilter | string
    seasonId?: UuidFilter | string
    botId?: UuidFilter | string
  }

  export type BotCreateWithoutHighscoresInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    team?: TeamCreateNestedOneWithoutBotsInput
    recordings?: RecordingCreateNestedManyWithoutBotInput
  }

  export type BotUncheckedCreateWithoutHighscoresInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    teamId: string
    recordings?: RecordingUncheckedCreateNestedManyWithoutBotInput
  }

  export type BotCreateOrConnectWithoutHighscoresInput = {
    where: BotWhereUniqueInput
    create: XOR<BotCreateWithoutHighscoresInput, BotUncheckedCreateWithoutHighscoresInput>
  }

  export type SeasonCreateWithoutHighscoresInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    recordings?: RecordingCreateNestedManyWithoutSeasonInput
    boardConfig: BoardConfigCreateNestedOneWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutHighscoresInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    boardConfigId: string
    recordings?: RecordingUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutHighscoresInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutHighscoresInput, SeasonUncheckedCreateWithoutHighscoresInput>
  }

  export type BotUpsertWithoutHighscoresInput = {
    update: XOR<BotUpdateWithoutHighscoresInput, BotUncheckedUpdateWithoutHighscoresInput>
    create: XOR<BotCreateWithoutHighscoresInput, BotUncheckedCreateWithoutHighscoresInput>
  }

  export type BotUpdateWithoutHighscoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneWithoutBotsNestedInput
    recordings?: RecordingUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateWithoutHighscoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
    recordings?: RecordingUncheckedUpdateManyWithoutBotNestedInput
  }

  export type SeasonUpsertWithoutHighscoresInput = {
    update: XOR<SeasonUpdateWithoutHighscoresInput, SeasonUncheckedUpdateWithoutHighscoresInput>
    create: XOR<SeasonCreateWithoutHighscoresInput, SeasonUncheckedCreateWithoutHighscoresInput>
  }

  export type SeasonUpdateWithoutHighscoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recordings?: RecordingUpdateManyWithoutSeasonNestedInput
    boardConfig?: BoardConfigUpdateOneRequiredWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutHighscoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    boardConfigId?: StringFieldUpdateOperationsInput | string
    recordings?: RecordingUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type BotCreateWithoutRecordingsInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    team?: TeamCreateNestedOneWithoutBotsInput
    highscores?: HighscoreCreateNestedManyWithoutBotInput
  }

  export type BotUncheckedCreateWithoutRecordingsInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    teamId: string
    highscores?: HighscoreUncheckedCreateNestedManyWithoutBotInput
  }

  export type BotCreateOrConnectWithoutRecordingsInput = {
    where: BotWhereUniqueInput
    create: XOR<BotCreateWithoutRecordingsInput, BotUncheckedCreateWithoutRecordingsInput>
  }

  export type SeasonCreateWithoutRecordingsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    highscores?: HighscoreCreateNestedManyWithoutSeasonInput
    boardConfig: BoardConfigCreateNestedOneWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutRecordingsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    boardConfigId: string
    highscores?: HighscoreUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutRecordingsInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutRecordingsInput, SeasonUncheckedCreateWithoutRecordingsInput>
  }

  export type BotUpsertWithoutRecordingsInput = {
    update: XOR<BotUpdateWithoutRecordingsInput, BotUncheckedUpdateWithoutRecordingsInput>
    create: XOR<BotCreateWithoutRecordingsInput, BotUncheckedCreateWithoutRecordingsInput>
  }

  export type BotUpdateWithoutRecordingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneWithoutBotsNestedInput
    highscores?: HighscoreUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateWithoutRecordingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
    highscores?: HighscoreUncheckedUpdateManyWithoutBotNestedInput
  }

  export type SeasonUpsertWithoutRecordingsInput = {
    update: XOR<SeasonUpdateWithoutRecordingsInput, SeasonUncheckedUpdateWithoutRecordingsInput>
    create: XOR<SeasonCreateWithoutRecordingsInput, SeasonUncheckedCreateWithoutRecordingsInput>
  }

  export type SeasonUpdateWithoutRecordingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    highscores?: HighscoreUpdateManyWithoutSeasonNestedInput
    boardConfig?: BoardConfigUpdateOneRequiredWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutRecordingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    boardConfigId?: StringFieldUpdateOperationsInput | string
    highscores?: HighscoreUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type HighscoreCreateWithoutSeasonInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    bot: BotCreateNestedOneWithoutHighscoresInput
  }

  export type HighscoreUncheckedCreateWithoutSeasonInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    botId: string
  }

  export type HighscoreCreateOrConnectWithoutSeasonInput = {
    where: HighscoreWhereUniqueInput
    create: XOR<HighscoreCreateWithoutSeasonInput, HighscoreUncheckedCreateWithoutSeasonInput>
  }

  export type HighscoreCreateManySeasonInputEnvelope = {
    data: Enumerable<HighscoreCreateManySeasonInput>
    skipDuplicates?: boolean
  }

  export type RecordingCreateWithoutSeasonInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    bot: BotCreateNestedOneWithoutRecordingsInput
  }

  export type RecordingUncheckedCreateWithoutSeasonInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    botId: string
  }

  export type RecordingCreateOrConnectWithoutSeasonInput = {
    where: RecordingWhereUniqueInput
    create: XOR<RecordingCreateWithoutSeasonInput, RecordingUncheckedCreateWithoutSeasonInput>
  }

  export type RecordingCreateManySeasonInputEnvelope = {
    data: Enumerable<RecordingCreateManySeasonInput>
    skipDuplicates?: boolean
  }

  export type BoardConfigCreateWithoutSeasonInput = {
    id?: string
    inventorySize?: number
    canTackle?: boolean
    teleporters?: number
    teleportRelocation?: number
    height?: number
    width?: number
    minimumDelayBetweenMoves?: number
    sessionLength?: number
    separateBoards?: boolean
    dummyBots?: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
  }

  export type BoardConfigUncheckedCreateWithoutSeasonInput = {
    id?: string
    inventorySize?: number
    canTackle?: boolean
    teleporters?: number
    teleportRelocation?: number
    height?: number
    width?: number
    minimumDelayBetweenMoves?: number
    sessionLength?: number
    separateBoards?: boolean
    dummyBots?: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
  }

  export type BoardConfigCreateOrConnectWithoutSeasonInput = {
    where: BoardConfigWhereUniqueInput
    create: XOR<BoardConfigCreateWithoutSeasonInput, BoardConfigUncheckedCreateWithoutSeasonInput>
  }

  export type HighscoreUpsertWithWhereUniqueWithoutSeasonInput = {
    where: HighscoreWhereUniqueInput
    update: XOR<HighscoreUpdateWithoutSeasonInput, HighscoreUncheckedUpdateWithoutSeasonInput>
    create: XOR<HighscoreCreateWithoutSeasonInput, HighscoreUncheckedCreateWithoutSeasonInput>
  }

  export type HighscoreUpdateWithWhereUniqueWithoutSeasonInput = {
    where: HighscoreWhereUniqueInput
    data: XOR<HighscoreUpdateWithoutSeasonInput, HighscoreUncheckedUpdateWithoutSeasonInput>
  }

  export type HighscoreUpdateManyWithWhereWithoutSeasonInput = {
    where: HighscoreScalarWhereInput
    data: XOR<HighscoreUpdateManyMutationInput, HighscoreUncheckedUpdateManyWithoutHighscoresInput>
  }

  export type RecordingUpsertWithWhereUniqueWithoutSeasonInput = {
    where: RecordingWhereUniqueInput
    update: XOR<RecordingUpdateWithoutSeasonInput, RecordingUncheckedUpdateWithoutSeasonInput>
    create: XOR<RecordingCreateWithoutSeasonInput, RecordingUncheckedCreateWithoutSeasonInput>
  }

  export type RecordingUpdateWithWhereUniqueWithoutSeasonInput = {
    where: RecordingWhereUniqueInput
    data: XOR<RecordingUpdateWithoutSeasonInput, RecordingUncheckedUpdateWithoutSeasonInput>
  }

  export type RecordingUpdateManyWithWhereWithoutSeasonInput = {
    where: RecordingScalarWhereInput
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyWithoutRecordingsInput>
  }

  export type BoardConfigUpsertWithoutSeasonInput = {
    update: XOR<BoardConfigUpdateWithoutSeasonInput, BoardConfigUncheckedUpdateWithoutSeasonInput>
    create: XOR<BoardConfigCreateWithoutSeasonInput, BoardConfigUncheckedCreateWithoutSeasonInput>
  }

  export type BoardConfigUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventorySize?: IntFieldUpdateOperationsInput | number
    canTackle?: BoolFieldUpdateOperationsInput | boolean
    teleporters?: IntFieldUpdateOperationsInput | number
    teleportRelocation?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    minimumDelayBetweenMoves?: IntFieldUpdateOperationsInput | number
    sessionLength?: IntFieldUpdateOperationsInput | number
    separateBoards?: BoolFieldUpdateOperationsInput | boolean
    dummyBots?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardConfigUncheckedUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventorySize?: IntFieldUpdateOperationsInput | number
    canTackle?: BoolFieldUpdateOperationsInput | boolean
    teleporters?: IntFieldUpdateOperationsInput | number
    teleportRelocation?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    minimumDelayBetweenMoves?: IntFieldUpdateOperationsInput | number
    sessionLength?: IntFieldUpdateOperationsInput | number
    separateBoards?: BoolFieldUpdateOperationsInput | boolean
    dummyBots?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotCreateWithoutTeamInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    highscores?: HighscoreCreateNestedManyWithoutBotInput
    recordings?: RecordingCreateNestedManyWithoutBotInput
  }

  export type BotUncheckedCreateWithoutTeamInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
    highscores?: HighscoreUncheckedCreateNestedManyWithoutBotInput
    recordings?: RecordingUncheckedCreateNestedManyWithoutBotInput
  }

  export type BotCreateOrConnectWithoutTeamInput = {
    where: BotWhereUniqueInput
    create: XOR<BotCreateWithoutTeamInput, BotUncheckedCreateWithoutTeamInput>
  }

  export type BotCreateManyTeamInputEnvelope = {
    data: Enumerable<BotCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type BotUpsertWithWhereUniqueWithoutTeamInput = {
    where: BotWhereUniqueInput
    update: XOR<BotUpdateWithoutTeamInput, BotUncheckedUpdateWithoutTeamInput>
    create: XOR<BotCreateWithoutTeamInput, BotUncheckedCreateWithoutTeamInput>
  }

  export type BotUpdateWithWhereUniqueWithoutTeamInput = {
    where: BotWhereUniqueInput
    data: XOR<BotUpdateWithoutTeamInput, BotUncheckedUpdateWithoutTeamInput>
  }

  export type BotUpdateManyWithWhereWithoutTeamInput = {
    where: BotScalarWhereInput
    data: XOR<BotUpdateManyMutationInput, BotUncheckedUpdateManyWithoutBotsInput>
  }

  export type BotScalarWhereInput = {
    AND?: Enumerable<BotScalarWhereInput>
    OR?: Enumerable<BotScalarWhereInput>
    NOT?: Enumerable<BotScalarWhereInput>
    id?: UuidFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    createTimeStamp?: DateTimeFilter | Date | string
    updateTimeStamp?: DateTimeFilter | Date | string
    password?: StringNullableFilter | string | null
    teamId?: UuidFilter | string
  }

  export type SeasonCreateManyBoardConfigInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
  }

  export type SeasonUpdateWithoutBoardConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    highscores?: HighscoreUpdateManyWithoutSeasonNestedInput
    recordings?: RecordingUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutBoardConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    highscores?: HighscoreUncheckedUpdateManyWithoutSeasonNestedInput
    recordings?: RecordingUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateManyWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HighscoreCreateManyBotInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    seasonId: string
  }

  export type RecordingCreateManyBotInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    seasonId: string
  }

  export type HighscoreUpdateWithoutBotInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUpdateOneRequiredWithoutHighscoresNestedInput
  }

  export type HighscoreUncheckedUpdateWithoutBotInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    seasonId?: StringFieldUpdateOperationsInput | string
  }

  export type HighscoreUncheckedUpdateManyWithoutHighscoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    seasonId?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingUpdateWithoutBotInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    season?: SeasonUpdateOneRequiredWithoutRecordingsNestedInput
  }

  export type RecordingUncheckedUpdateWithoutBotInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingUncheckedUpdateManyWithoutRecordingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
  }

  export type HighscoreCreateManySeasonInput = {
    id?: string
    score: number
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    botId: string
  }

  export type RecordingCreateManySeasonInput = {
    id?: string
    score: number
    board: number
    createTimeStamp?: Date | string
    recording: string
    botId: string
  }

  export type HighscoreUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    bot?: BotUpdateOneRequiredWithoutHighscoresNestedInput
  }

  export type HighscoreUncheckedUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    botId?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    bot?: BotUpdateOneRequiredWithoutRecordingsNestedInput
  }

  export type RecordingUncheckedUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    board?: IntFieldUpdateOperationsInput | number
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    recording?: StringFieldUpdateOperationsInput | string
    botId?: StringFieldUpdateOperationsInput | string
  }

  export type BotCreateManyTeamInput = {
    id?: string
    name: string
    email: string
    createTimeStamp?: Date | string
    updateTimeStamp?: Date | string
    password?: string | null
  }

  export type BotUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    highscores?: HighscoreUpdateManyWithoutBotNestedInput
    recordings?: RecordingUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    highscores?: HighscoreUncheckedUpdateManyWithoutBotNestedInput
    recordings?: RecordingUncheckedUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateManyWithoutBotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updateTimeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}