"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const prom_constants_1 = require("./prom.constants");
const prom_client_1 = require("prom-client");
const prom_utils_1 = require("./common/prom.utils");
function createPromCounterProvider(configuration, registryName = prom_constants_1.DEFAULT_PROM_REGISTRY) {
    return {
        provide: prom_utils_1.getMetricToken('Counter', configuration.name),
        useFactory: (registry) => {
            const obj = new prom_client_1.Counter(Object.assign({}, configuration, { registers: [registry] }));
            return obj;
        },
        inject: [
            registryName === prom_constants_1.DEFAULT_PROM_REGISTRY ?
                prom_constants_1.DEFAULT_PROM_REGISTRY : prom_utils_1.getRegistryName(registryName),
        ],
    };
}
exports.createPromCounterProvider = createPromCounterProvider;
function createPromGaugeProvider(configuration, registryName = prom_constants_1.DEFAULT_PROM_REGISTRY) {
    return {
        provide: prom_utils_1.getMetricToken('Gauge', configuration.name),
        useFactory: (registry) => {
            const obj = new prom_client_1.Gauge(Object.assign({}, configuration, { registers: [registry] }));
            return obj;
        },
        inject: [
            registryName === prom_constants_1.DEFAULT_PROM_REGISTRY ?
                prom_constants_1.DEFAULT_PROM_REGISTRY : prom_utils_1.getRegistryName(registryName),
        ],
    };
}
exports.createPromGaugeProvider = createPromGaugeProvider;
function createPromHistogramProvider(configuration, registryName = prom_constants_1.DEFAULT_PROM_REGISTRY) {
    return {
        provide: prom_utils_1.getMetricToken('Histogram', configuration.name),
        useFactory: (registry) => {
            const obj = new prom_client_1.Histogram(Object.assign({}, configuration, { registers: [registry] }));
            return obj;
        },
        inject: [
            registryName === prom_constants_1.DEFAULT_PROM_REGISTRY ?
                prom_constants_1.DEFAULT_PROM_REGISTRY : prom_utils_1.getRegistryName(registryName),
        ],
    };
}
exports.createPromHistogramProvider = createPromHistogramProvider;
function createPromSummaryProvider(configuration, registryName = prom_constants_1.DEFAULT_PROM_REGISTRY) {
    return {
        provide: prom_utils_1.getMetricToken('Summary', configuration.name),
        useFactory: (registry) => {
            const obj = new prom_client_1.Summary(Object.assign({}, configuration, { registers: [registry] }));
            return obj;
        },
        inject: [
            registryName === prom_constants_1.DEFAULT_PROM_REGISTRY ?
                prom_constants_1.DEFAULT_PROM_REGISTRY : prom_utils_1.getRegistryName(registryName),
        ],
    };
}
exports.createPromSummaryProvider = createPromSummaryProvider;
