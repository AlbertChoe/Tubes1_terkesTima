"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const prom_client_1 = require("prom-client");
const responseTime = require("response-time");
const common_2 = require("../common");
const inbound_middleware_options_1 = require("./inbound.middleware-options");
const normalizers_1 = require("./normalizers");
let InboundMiddleware = class InboundMiddleware {
    constructor(_options, _requestsTotal, _requestsDuration) {
        this._options = _options;
        this._requestsTotal = _requestsTotal;
        this._requestsDuration = _requestsDuration;
    }
    use(req, res, next) {
        responseTime((req, res, time) => {
            const { url, method } = req;
            const path = normalizers_1.normalizePath(url, this._options.pathNormalizationExtraMasks, "#val");
            if (path !== this._options.metricsPath && path !== "/favicon.ico") {
                const status = normalizers_1.normalizeStatusCode(res.statusCode);
                const labels = { method, status, path };
                this._requestsTotal.inc(labels);
                this._requestsDuration.observe(labels, time / 1000);
            }
        })(req, res, next);
    }
};
InboundMiddleware = __decorate([
    common_1.Injectable(),
    __param(1, common_2.InjectCounterMetric('http_requests_total')),
    __param(2, common_2.InjectHistogramMetric('http_requests_duration_seconds')),
    __metadata("design:paramtypes", [inbound_middleware_options_1.InboundMiddlewareOptions,
        prom_client_1.Counter,
        prom_client_1.Histogram])
], InboundMiddleware);
exports.InboundMiddleware = InboundMiddleware;
