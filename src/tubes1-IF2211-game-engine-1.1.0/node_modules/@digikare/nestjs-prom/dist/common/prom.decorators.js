"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const prom_utils_1 = require("./prom.utils");
exports.InjectCounterMetric = (name) => common_1.Inject(prom_utils_1.getMetricToken(`Counter`, name));
exports.InjectGaugeMetric = (name) => common_1.Inject(prom_utils_1.getMetricToken(`Gauge`, name));
exports.InjectHistogramMetric = (name) => common_1.Inject(prom_utils_1.getMetricToken(`Histogram`, name));
exports.InjectSummaryMetric = (name) => common_1.Inject(prom_utils_1.getMetricToken(`Summary`, name));
exports.PromMethodCounter = () => {
    return (target, propertyKey, descriptor) => {
        const className = target.constructor.name;
        const name = `app_${className}_${propertyKey.toString()}_calls_total`;
        const help = `app_${className}#${propertyKey.toString()} called total`;
        const methodFunc = descriptor.value;
        let counterMetric = undefined;
        descriptor.value = function (...args) {
            if (!counterMetric) {
                counterMetric = prom_utils_1.findOrCreateCounter({ name, help });
            }
            counterMetric.inc(1);
            return methodFunc.apply(this, args);
        };
    };
};
exports.PromInstanceCounter = (ctor) => {
    const name = `app_${ctor.name}_instances_total`;
    const help = `app_${ctor.name} object instances total`;
    let counterMetric = undefined;
    return class extends ctor {
        constructor(...args) {
            if (!counterMetric) {
                counterMetric = prom_utils_1.findOrCreateCounter({ name, help });
            }
            counterMetric.inc(1);
            super(...args);
        }
    };
};
