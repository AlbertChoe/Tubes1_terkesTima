"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client = require("prom-client");
function getMetricToken(type, name) {
    return `${name}${type}`;
}
exports.getMetricToken = getMetricToken;
function getRegistryName(name) {
    return `${name}PromRegistry`;
}
exports.getRegistryName = getRegistryName;
function getOptionsName(name) {
    return `${name}PromOptions`;
}
exports.getOptionsName = getOptionsName;
exports.findOrCreateMetric = ({ name, type, help, labelNames, }) => {
    let metric = client.register.getSingleMetric(name);
    if (!metric) {
        switch (type) {
            case "Counter":
                return new client.Counter({
                    name: name,
                    help: help || `${name} ${type}`,
                    labelNames,
                });
            case "Gauge":
                return new client.Gauge({
                    name: name,
                    help: help || `${name} ${type}`,
                    labelNames,
                });
            case "Histogram":
                return new client.Histogram({
                    name: name,
                    help: help || `${name} ${type}`,
                    labelNames,
                });
            case "Summary":
                return new client.Histogram({
                    name: name,
                    help: help || `${name} ${type}`,
                    labelNames,
                });
            default:
                throw new Error(`Type ${type} not supported`);
        }
    }
    return metric;
};
exports.findOrCreateCounter = ({ name, help, labelNames, }) => {
    return exports.findOrCreateMetric({
        name,
        help,
        type: `Counter`,
        labelNames,
    });
};
exports.findOrCreateGauge = ({ name, help, labelNames, }) => {
    return exports.findOrCreateMetric({
        name,
        help,
        type: `Gauge`,
        labelNames,
    });
};
exports.findOrCreateHistogram = ({ name, help, labelNames, }) => {
    return exports.findOrCreateMetric({
        name,
        help,
        type: `Histogram`,
        labelNames,
    });
};
exports.findOrCreateSummary = ({ name, help, labelNames, }) => {
    return exports.findOrCreateMetric({
        name,
        help,
        type: `Summary`,
        labelNames,
    });
};
